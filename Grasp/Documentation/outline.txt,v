head	4.0;
access;
symbols
	PPPM_Crozier2:4.0.0.10
	PPPM_Crozier:4.0
	Root-of-PPPM_Crozier:4.0
	Monaco:4.0.0.8
	PreMonaco:4.0
	Recovery-2004-04-12:4.0
	BRANCH:4.0.0.6
	PMONACO:4.0.0.4
	ROOT:4.0
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoDoc:3.0.0.6
	InitialGraspDoc:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	cjkimme_version_merge_from_trunk_1:2.0.2.1
	cjkimme_version:2.0.0.2;
locks; strict;
comment	@# @;


4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.0;

2.0
date	2003.04.24.17.18.09;	author athomps;	state Exp;
branches
	2.0.2.1;
next	1.1;

1.1
date	2003.01.18.00.23.41;	author athomps;	state Exp;
branches;
next	;

2.0.2.1
date	2004.09.13.23.05.46;	author cjkimme;	state Exp;
branches;
next	;


desc
@@


4.0
log
@This is version 4.0
@
text
@Draft Outline for Setanta, a Reactive Molecular Dynamics Code
-------------------------------------------------------------

Purpose: To sketch the structure and function of Setanta
Initiated: October 16, 2002
Author: Aidan Thompson

Code Objective: To perform classical molecular dynamics
simulation on a set of particles 

Requirements: Performance should scale reasonably to a large
number of processors and a large number of atoms

Sequence of Operations: 
	 1. Set up initial configuration
	 2. For each timestep 
	 3.  For each level
	 4.	Calculate forces 
	 5.	Update velocities
	 6.	Update positions
	 7.	Generate Output
	 8.	Communicate
 	 9.  End
        10. End

Steps 4-8 may occur in an order and may be repeated

List of Objects:
	 1. System
	    a. Box
	       I.  Ensemble
	       II. Boundary Conditions
	       III. ParticleList	
            b. Particles (sub-classes: Neutral, Fixed Charge,
			      Varying Charge, Point Dipole,
               0.   Type
	       I.   Position
	       II.  Velocity
               III. Force
               IV.  Charge
              (V.   Dipole)

Key member functions:

    Box::StepVelocity(ParticleList& particles, int& nparticles, double& timestep)
    Box::StepPositions(ParticleList& particles, int& nparticles, double& timestep)
    Box::ComputeForce(ParticleList& particles, int& nparticles)

    ParticleList::AddParticle(ParticleList& particles, int& nparticles,
					       int& particleclass, int& particletype,
					       double& charge = 0, double& dipole = 0
					       double& x, double& y, double& z) 
    ParticleList::RemoveParticle(ParticleList& particles, int& nparticles,
						int& iparticle)

						
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@@


2.0
log
@This is starting point for verison 2.0.
The functionality is unchanged, even slightly degraded,
as some items have not yet been converted, primarily
output features such as energy conservation.

The compartmentalization between different operations has
been greatly enhanced.

Performance is unchanged.
@
text
@@


2.0.2.1
log
@Adding Documentation and Testing directories to branch cjkimme_version
@
text
@@


1.1
log
@
Added project files, including new file units.txt
@
text
@@

