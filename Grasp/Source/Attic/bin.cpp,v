head	1.1;
access;
symbols
	Monaco_Aidan:1.1.6.2.0.2
	Root-of-Monaco_Aidan:1.1.6.2
	Monaco:1.1.0.6
	PreMonaco:1.1
	PMONACO:1.1.0.4
	P_MonacoSource:1.1.0.2;
locks; strict;
comment	@// @;


1.1
date	2005.04.07.00.04.52;	author saubry;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2005.04.07.00.04.52;	author saubry;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.04.08.00.04.39;	author saubry;	state Exp;
branches;
next	;

1.1.4.1
date	2005.04.12.22.58.05;	author saubry;	state Exp;
branches;
next	;

1.1.6.1
date	2005.05.03.22.14.52;	author athomps;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2005.05.10.23.31.54;	author saubry;	state Exp;
branches
	1.1.6.2.2.1;
next	;

1.1.6.2.2.1
date	2005.07.28.23.17.30;	author saubry;	state Exp;
branches;
next	1.1.6.2.2.2;

1.1.6.2.2.2
date	2005.08.04.18.28.14;	author saubry;	state Exp;
branches;
next	1.1.6.2.2.3;

1.1.6.2.2.3
date	2005.10.11.21.43.24;	author saubry;	state Exp;
branches;
next	1.1.6.2.2.4;

1.1.6.2.2.4
date	2005.10.21.15.44.43;	author saubry;	state Exp;
branches;
next	1.1.6.2.2.5;

1.1.6.2.2.5
date	2005.11.01.21.17.20;	author saubry;	state Exp;
branches;
next	1.1.6.2.2.6;

1.1.6.2.2.6
date	2005.12.19.17.57.04;	author athomps;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file bin.cpp was initially added on branch P_MonacoSource.
@
text
@@


1.1.6.1
log
@Added new files to Monaco branch.
@
text
@a0 82
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>
#include <sstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "bin.h"
#include "constants.h"
#include "particlelist.h"
#include "particle.h"
#include "neighbor.h"
#include "forcefield.h"
#include "forcefieldlist.h"
#include "output.h"
#include "comm.h"
#include "log.h"
extern Log glog;
extern Constants constants;


Bin::Bin()
{
  id = 0;
  binx = 0;
  biny = 0;
  binz = 0;
  ghost = -1;
}


void Bin::set_nbrs(vector <Bin *> nbrs)
{
  for (int k=0; k<nbrs.size(); k++) 
    neighbors.push_back(nbrs[k]);
}
@


1.1.6.2
log
@Alex's algorithm implemented. Need more checks in parallel
@
text
@d74 1
@


1.1.6.2.2.1
log
@Implemented tools for bins lists:
  - intersection
  - union
  - copy constructor

Created a new class:  BinTools.
Tested these tools.

Seems to work ok in serial and parallel.
@
text
@a73 19
  ghostbin = 0;
  particles.resize(0);
}

Bin::Bin(const Bin& b)
{
  // b constructor
  id   = b.id;
  binx = b.binx;
  biny = b.biny;
  binz = b.binz;

  for (int i=0;i<6;i++)
    binregion[i] = b.binregion[i];

  for (int i=0;i<particles.size();i++)
    particles[i] = b.particles[i];
    
  ghostbin = b.ghostbin;
@


1.1.6.2.2.2
log
@Implement Alex's algorithm to send specific octant bin lists.
No communication implemented yet.
@
text
@d89 3
a91 2
  particles.resize(b.particles.size());
  particles = b.particles;
@


1.1.6.2.2.3
log
@Correct several bugs
@
text
@a99 7

void Bin::set_particles(const Particle part)
{
  int isize = particles.size();
  particles.resize(isize+1);
  particles[isize] = part;
};
@


1.1.6.2.2.4
log
@Correct a few things.
@
text
@a84 1
  ghostbin = b.ghostbin;
d88 1
a88 1
  
d91 1
d94 1
@


1.1.6.2.2.5
log
@Add a pointer to particle instead of an array of particle.

Bug in particles coordinates.
@
text
@d100 1
a100 2

void Bin::set_particles(Particle * part)
d105 1
a105 2
}

@


1.1.6.2.2.6
log
@Bin Communication fixed
@
text
@d101 5
a105 2
void Bin::set_particles(const int& part) {
  particles.push_back(part);
@


1.1.4.1
log
@*** empty log message ***
@
text
@a0 41
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>
#include <sstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "bin.h"
#include "constants.h"
#include "particlelist.h"
#include "particle.h"
#include "neighbor.h"
#include "forcefield.h"
#include "forcefieldlist.h"
#include "output.h"
#include "comm.h"
#include "log.h"
extern Log glog;
extern Constants constants;


Bin::Bin()
{
  id = 0;
  binx = 0;
  biny = 0;
  binz = 0;
}


void Bin::set_nbrs(int nbrs[26])
{
  Bin current_bin;
  for (int k=0;k<26;k++)
    {
      current_bin.set_id(nbrs[k]);
      neighbors.push_back(current_bin);
    }
}
@


1.1.2.1
log
@Fusion of ALex and Sylvie's versions.
Implementation of bins.
Add energy change.

saubry (04-06-05)
@
text
@a0 37
//#include "grasp.h"
//#include "bin.h"


#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>
#include <sstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "bin.h"
#include "constants.h"
#include "particlelist.h"
#include "particle.h"
#include "neighbor.h"
#include "forcefield.h"
#include "forcefieldlist.h"
#include "output.h"
#include "comm.h"
#include "log.h"
extern Log glog;
extern Constants constants;


Bin::Bin()
{
  id = 0;
  binx = 0;
  biny = 0;
  binz = 0;

  neighbors.resize(26);
}

@


1.1.2.2
log
@Modify binlist to create bins array locally (to each proc).
Begin implementing octantlist.

saubry (04-07-05).
@
text
@d1 4
@


