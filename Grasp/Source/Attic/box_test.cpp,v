head	2.1;
access;
symbols
	PreMonaco:2.1;
locks; strict;
comment	@// @;


2.1
date	2003.04.24.19.37.50;	author athomps;	state dead;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.17.17.14.18;	author athomps;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.03.20.32.39;	author athomps;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.25.23.06.37;	author athomps;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.21.23.10.03;	author athomps;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.18.23.15.17;	author athomps;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.05.00.32.02;	author athomps;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.00.12.41;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.18.00.20.49;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.08.23.25.53;	author athomps;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Removing obsolete files from version 2.
@
text
@#include <iostream>
#include <string>
#include <vector>
#include "input.h"
#include "constants.h"
#include "box.h"
#include "integrator.h"
#include "neighbor.h"

using namespace std;

int main()
{
  float ttotal;
  clock_t t1,t2;
  Input inp;

  t1 = clock();

  inp.ReadInput();

  // Convert inp.timestep from external to internal units.
  switch(inp.units_style) {
  case (real_units):
    inp.timestep = inp.timestep/tfactor_real;
    break;
  case (reduced_units):
    inp.timestep = inp.timestep/tfactor_reduced;
    break;
  default:
    break;
  }

  //Initialize box (false indicates no pbc in that direction)
  Box& b = Box::get(inp.lva,inp.lvb,inp.lvc,inp.origin,true,true,true,
		    inp.units_style);
  //Box& b = Box::get(inp.lva,inp.lvb,inp.lvc,inp.origin,false,false,false);
  //Set up particle types
  b.ReadParticleTypes();
  //Set up particle geometry
  b.ReadConfig();
  //Set up forcefield tables
  b.ForcefieldSetup(inp.neighbor_style,inp.neighbor_rskin,
		    inp.ff_classname_list,inp.ff_filename_list);
  //Set up indexes of particle types used by various force types
  cout << "Finished ForcefieldSetup" << endl;
  b.SetupTypes_Force();
  //Assign particle types to particles based on ids.
  b.SetupTypes_Particle();
  //Setup the density profile sampling
  //Arguments are: nbins, iaxis.
  if (inp.Ldensity_profile) {
    b.SetupDensityProfile(inp.density_nbins,inp.density_iaxis);
  }
  // Fold particles into central box
  b.ResetPosition(true);
  // Perform initial neghboring
  switch(inp.neighbor_style) {
  case Neighbor::neighbor_none:
    break;
  default:
    b.Neighboring();
  }
  //Summary of system properties
  b.Summary();
  //Perform MD run
  //Set up particle velocities
  b.SetupVelocities(inp.temp_init, inp.temp_iseed);
  if (inp.Lthermo) {
    cout << endl << 
      "****************************************************" << endl;
    cout << "Timestep = 0"  << endl;
    b.ComputeForce(true);
  } else {
    b.ComputeForce(false);
  }
  if (inp.Lthermo) {
    b.OutputThermo(0,true);
    cout << 
      "****************************************************" << endl;
  }
  if (inp.Ldump) {
    b.OutputParticles(0,true);
  }
  if (inp.Ldumpvel) {
    b.OutputVelocities(0,true);
  }
  if (inp.Ldensity_profile) {
    b.SampleDensityProfile();
  }

  for (int istep=1;istep<=inp.nsteps;istep++) {

    b.StepVelocity(inp.timestep/2.0);
    b.StepPosition(inp.timestep);

    switch(inp.neighbor_style) {
    default:
      if (istep % inp.neighbor_freq == 0) {
	b.ResetPosition(false);
	b.Neighboring();
      }
      break;
    case Neighbor::neighbor_none:
      // Even when not reneighboring,
      // need to recenter particles periodically.
      // If not done sufficiently often, one of the
      // particles will stray more than half a box
      // length outside box, invalidating the minimg
      // distance calculations. This will only be
      // detected at the next call to ResetPosition.
      if (istep % 100 == 0) {
	b.ResetPosition(false);
      }
      break;
    }

    if (inp.Lthermo) {
      if (istep % inp.thermo_freq == 0) {
	cout << endl << 
	  "****************************************************" << endl;
	cout << "Timestep = " << istep << endl;
	b.ComputeForce(true);
      } else {
	b.ComputeForce(false);
      }
    } else {
      b.ComputeForce(false);
    }
  
    b.StepVelocity(inp.timestep/2.0);

    switch(inp.temp_control_style) {
    case Integrator::temp_control_rescale:
      if (istep % inp.temp_freq == 0) {
	b.TemperatureControlRescale(inp.temp_target,inp.temp_window,
				    inp.temp_factor);
      }
      break;
    case Integrator::temp_control_none:
      break;
    default:
      cout << "Error: invalid temperature control style" << endl;
      exit(0);
    }

    if (inp.Ldump) {
      if (istep % inp.dump_freq == 0) {
      b.ResetPosition(false);
      b.OutputParticles(istep,false);
      }
    }
  
    if (inp.Ldumpvel) {
      if (istep % inp.dumpvel_freq == 0) {
      b.OutputVelocities(istep,false);
      }
    }
  
    if (inp.Ldensity_profile) {
      if (istep % inp.density_freq == 0) {
	b.SampleDensityProfile();
      }
    }

    if (inp.Lthermo) {
      if (istep % inp.thermo_freq == 0) {
	b.OutputThermo(istep,false);
	cout << 
	  "****************************************************" << endl;
      }
    }
  
  }

  if (inp.Ldensity_profile) {
    b.OutputDensityProfile(inp.nsteps,true);
  }

  t2 = clock();
  ttotal = (t2-t1)/float(CLOCKS_PER_SEC);
  cout << "Total run time is " << ttotal << endl;

  return 0;
}

@


2.0
log
@*** empty log message ***
@
text
@@


1.9
log
@Added class Profile to measure different types of spatial profiles
Added class Input to handle input commands.
Added global functions input_string to parse input commands.
@
text
@@


1.8
log
@Added the Forcefield derived class Force_External. It makes use
of the class Fixed_Object, which resembles class Particle,
bu does not have a velocity vector and does not provide
timestepping operations.

Also added the basic temperature initialization in temperature.cpp,
as well as velocity output in box.cpp.
@
text
@a2 2
#include <iomanip>
#include <sstream>
d4 1
d7 2
a13 6
  double timestep,lva[3],lvb[3],lvc[3],origin[3];
  double temp_init;
  int nsteps;
  int temp_iseed;
  bool Ltwobody,Lthreebody,Lexternal;
  string buf,strtmp;
d16 1
d20 12
a31 19
  //See units.txt. for description of unit conventions.
  cout.setf(ios::showpoint);
  //cin.setf(boolalpha);
  //cout.setf(boolalpha);
  cout << "Input Ltwobody:" << endl;

  // this is a quick hack to allow comments at top of inp.dat
  // Beware, it still trips up on leading whitespace lines.
  getline(cin,buf);
  while (buf.empty() || buf[0]=='#') getline(cin,buf);
  stringstream buf_in(buf);
  buf_in >> strtmp;
  if (strtmp == "true"){
    Ltwobody = true;
  } else if (strtmp == "false"){
    Ltwobody = false;
  } else {
    cout << "Invalid boolean state" << endl;
    exit(0);
d33 5
a37 63
  cout << "Input Lthreebody:" << endl;
  cin >> strtmp;
  if (strtmp == "true"){
    Lthreebody = true;
  } else if (strtmp == "false"){
    Lthreebody = false;
  } else {
    cout << "Invalid boolean state" << endl;
    exit(0);
  }
  cout << "Input Lexternal:" << endl;
  cin >> strtmp;
  if (strtmp == "true"){
    Lexternal = true;
  } else if (strtmp == "false"){
    Lexternal = false;
  } else {
    cout << "Invalid boolean state" << endl;
    exit(0);
  }
  cout << "Input timestep size [fs]:" << endl;
  cin >> timestep;
  cout << "Input number of timesteps:" << endl;
  cin >> nsteps;
  cout << "Input unit cell lattice vector a [A]:" << endl;
  cin >> lva[0] >> lva[1] >> lva[2];
  cout << "Input unit cell lattice vector b [A]:" << endl;
  cin >> lvb[0] >> lvb[1] >> lvb[2];
  cout << "Input unit cell lattice vector c [A]:" << endl;
  cin >> lvc[0] >> lvc[1] >> lvc[2];
  cout << "Input unit cell origin [A]:" << endl;
  cin >> origin[0] >> origin[1] >> origin[2];
  cout << "Input velocity initialization temperature [K]" << endl;
  cin >> temp_init;
  cout << "Input velocity initialization seed [-]" << endl;
  cin >> temp_iseed;

  cout << "Ltwobody = "  << (Ltwobody? "true" : "false" ) << endl;
  cout << "Lthreebody = "  << (Lthreebody? "true" : "false" ) << endl;
  cout << "Lexternal = "  << (Lthreebody? "true" : "false" ) << endl;
  cout << "Timestep size [fs] = " << timestep << endl;
  cout << "Number of timesteps = " << nsteps << endl;
  cout << "Lattice vector a [A] = " 
       << lva[0] << " " << lva[1] << " " << lva[2] << " " << endl;
  cout << "Lattice vector b [A] = " 
       << lvb[0] << " " << lvb[1] << " " << lvb[2] << " " << endl;
  cout << "Lattice vector c [A] = " 
       << lvc[0] << " " << lvc[1] << " " << lvc[2] << " " << endl;
  cout << "Unit cell origin [A] = " 
       << origin[0] << " " << origin[1] << " " << origin[2] << " " << endl;
  cout << "Velocity initialization temperature [K] = " << temp_init << endl;
  cout << "Velocity initialization seed [-] = " << temp_iseed << endl;
  if (cin.fail()) {
    cout << "Error in standard input" << endl;
    exit(0);
  }

  // Convert timestep from external to internal units.
  timestep = timestep/tfactor;
    //Initialize box (false indicates no pbc in that direction)
  Box& b = Box::get(lva,lvb,lvc,origin,true,true,true,
		    Ltwobody,Lthreebody,Lexternal);
  //Box& b = Box::get(lva,lvb,lvc,origin,false,false,false);
d43 2
a44 1
  b.ForcefieldSetup();
d50 14
a63 1
  
a64 2
  b.ResetPosition(true);
  b.Neighboring();
a66 3
  cout << endl << 
    "****************************************************" << endl;
  cout << "Timestep = 0"  << endl;
d68 2
a69 11
  b.SetupVelocities(temp_init, temp_iseed);
  b.ComputeForce();
  b.OutputThermo(0,true);
  //  b.OutputParticles(0);
  b.OutputParticles(0,true);
  //  b.OutputParticles(0);
  b.OutputVelocities(0,true);
  cout << 
    "****************************************************" << endl;

  for (int istep=1;istep<=nsteps;istep++) {
d72 19
a90 2
    cout << "Timestep = " << istep << endl;
    b.StepVelocity(timestep/2.0);
d92 1
a92 1
    b.StepPosition(timestep);
d94 35
a128 2
    if (istep % 10 == 0) {
      b.Neighboring();
d131 22
a152 2
    b.ComputeForce();
    b.OutputThermo(istep,false);
d154 4
a157 4
    if (istep == nsteps) {
      b.ResetPosition(false);
      b.OutputParticles(nsteps,false);
      b.OutputVelocities(nsteps,false);
d160 5
d166 8
a173 3
    b.StepVelocity(timestep/2.0);
    cout << 
      "****************************************************" << endl;
d176 3
@


1.7
log
@Added configuration output routine to Box.
Added shifted origin to minimg routines.
Cleaned up minimg routines to consistently
Deal with following issues:
	orthorhombic versus triclinic
	inner-loop Minimig_Dist functions only perform single box shift,
		as it is more efficient than general shift.
	For this reason, standard Minimg_Pos function also only
		performs single box shift, but also checks that
		aparticles have not strayed too far.
	Initial config may require more than single box shift, and
		so for this we use Minimg_Full_pos.
Treatment of equality conditions:
	Positions on )0,1[ are mapped onto [0,1).
	Positions on [0,1) are left alone.
	Distances on )-1,1( should not occur
	Distances on )-0.5,0.5( are mapped (-0.5,0.5).
	Distances on [-0.5,0.5] are left alone.
@
text
@d14 1
d16 2
a17 1
  bool Ltwobody,Lthreebody;
d54 10
d76 4
d83 1
d92 1
a92 1
  cout << "Unit cell origin = " 
d94 2
a95 1

d104 2
a105 1
  Box& b = Box::get(lva,lvb,lvc,origin,true,true,true,Ltwobody,Lthreebody);
d114 1
d127 2
d133 2
d153 6
a163 3

  b.ResetPosition(false);
  b.OutputParticles(nsteps,false);
@


1.6
log
@Fixed a variety of bugs related to energy conservation.
Add kinetic energy and temperature calculation.
LJ and Stillinger-Weber forcefields fully tested against
TOWHEE and energy conservation.
@
text
@d27 1
d29 1
a94 1
  //Currently only the Force_TwoBody class member function is implemented.
a97 2
  //Construct the neighbor list objects for the various force fields
  b.Neighboring();
d100 2
d109 2
d134 4
@


1.5
log
@Created an abstract class Forcefield, with derived classes Force_Twobody
and Force_Threebody.
Implemented Stillinger-Weber forcefield within Force_Threebody.
Unfortunately, the COSP neighboring method does not work for
threebody forces, so we currently do not have neighbor lists
for threebody interactions.  Probably need to use LAMMPS-like
ghost atom method and standard neighbor list structures.
@
text
@a0 2
using namespace std;

d6 1
d9 2
d50 1
a50 1
  cout << "Input timestep size (fs):" << endl;
d54 1
a54 1
  cout << "Input unit cell lattice vector a (A):" << endl;
d56 1
a56 1
  cout << "Input unit cell lattice vector b (A):" << endl;
d58 1
a58 1
  cout << "Input unit cell lattice vector c (A):" << endl;
d60 1
a60 1
  cout << "Input unit cell origin (A):" << endl;
d65 1
a65 1
  cout << "Timestep size = " << timestep << endl;
d67 1
a67 1
  cout << "Lattice vector a = " 
d69 1
a69 1
  cout << "Lattice vector b = " 
d71 1
a71 1
  cout << "Lattice vector c = " 
d81 3
a83 1
  //Initialize box (false indicates no pbc in that direction)
d103 3
d107 8
a114 3
  b.OutputThermo();
  
  for (int istep=0;istep<nsteps;istep++) {
d119 1
a119 1
    if (istep % 10 == 9) {
d123 4
d128 2
a129 1
    b.ComputeForce();
a130 1
  b.OutputThermo();
@


1.4
log
@Got rid of gratuituous "friend" declaration for class Neighobr in class Box.
@
text
@d4 3
a7 4
#include "particle.h"
#include "particle_types.h"
#include "neighbor.h"
#include "force_twobody.h"
d15 5
a20 3
  Ltwobody = true;
  Lthreebody = false;
    
d23 26
d62 2
d81 1
a81 1
  Box& b = Box::get(lva,lvb,lvc,origin,true,true,true);
d84 1
a84 2
  Particle_Types& t = Particle_Types::get();
  t.ReadParticleTypes();
d88 1
a88 1
  b.ForcefieldSetup(Ltwobody,Lthreebody);
d91 1
a91 1
  t.SetupTypes_Force(Ltwobody,Lthreebody);
d95 1
a95 1
  b.Neighboring(Ltwobody,Lthreebody);
d98 1
a98 1
  b.Summary(Ltwobody,Lthreebody);
d109 1
a109 1
      b.Neighboring(Ltwobody,Lthreebody);
d116 4
@


1.3
log
@

Added neighbor list object.
@
text
@d14 1
a14 4
  int nsteps,nparticles,npairs;
  float tforce;
  clock_t t1,t2;
  int ntypes;
d60 1
a60 10
  if (Ltwobody) {
    Force_Twobody& ftwobody = Force_Twobody::get();
    ftwobody.ReadTwobodyInteractions();
    ftwobody.SetupTwobodyInteractions();
  }
  if (Lthreebody) {
    cout << "Error in box_test" <<
      ": threebody not implemented" << endl;
    exit(0);
  }
d62 1
a62 1
  //Currrently only the Force_TwoBody class member function is implemented.
d66 2
a67 8
  //Construct the neighbor list object
  if (Ltwobody) {
    Force_Twobody& ftwobody = Force_Twobody::get();
    cout << "Lneighbor twobody = " << ftwobody.get_Lneighbor() << endl;
    if (ftwobody.get_Lneighbor()) {
      ftwobody.SetupNeighborListNsq();
    }
  }
d70 1
a70 13
  nparticles = b.get_nparticles();
  cout << "Number of particles in box = " << nparticles << endl;
  cout << "Number of particle types = " << t.get_ntypes() << endl;
  if (Ltwobody) {
    Force_Twobody& ftwobody = Force_Twobody::get();
    cout << "Number of twobody force types = " << ftwobody.get_ntypes() << endl;
    if (ftwobody.get_Lneighbor()) {
      npairs = ftwobody.get_nneighbors();
    } else {
      npairs = nparticles*(nparticles-1)/2;
      cout << "Number of twobody force pairs = " << npairs << endl;
    }
  }
a71 1
  t1 = clock();
a72 4
  t2 = clock();
  tforce = (t2-t1)/float(CLOCKS_PER_SEC);
  cout << "Force time is " << tforce << endl;
  cout << "Force-pair time is " << tforce/npairs << endl;
d80 2
a81 8
    if (Ltwobody) {
      Force_Twobody& ftwobody = Force_Twobody::get();
      if (ftwobody.get_Lneighbor()) {
	if (istep % 10 == 0) {
	  b.ResetPosition();
	  ftwobody.SetupNeighborListNsq();
	}
      }
a84 1
    t1 = clock();
a85 4
    t2 = clock();
    tforce = (t2-t1)/float(CLOCKS_PER_SEC);
    cout << "Force time is " << tforce << endl;
    cout << "Force-pair time is " << tforce/npairs << endl;
@


1.2
log
@
Added ReadParticleTypes, and improved organization of input,
including error checking.
@
text
@a4 1
#include "box.h"
d7 1
d9 1
d13 1
a13 1
  double timestep,x1,x2,y1,y2,z1,z2;
d18 5
d29 9
a37 6
  cout << "Input upper and lower x boundaries (A):" << endl;
  cin >> x1 >> x2;
  cout << "Input upper and lower y boundaries (A):" << endl;
  cin >> y1 >> y2;
  cout << "Input upper and lower z boundaries (A):" << endl;
  cin >> z1 >> z2;
d40 14
a53 3
  cout << "X boundaries = " << x1 << " " << x2 << endl;
  cout << "Y boundaries = " << y1 << " " << y2 << endl;
  cout << "Z boundaries = " << z1 << " " << z2 << endl;
d55 2
a56 2
  Box& b = Box::get(x1,x2,y1,y2,z1,z2,true,true,true);
  //Box& b = Box::get(x1,x2,y1,y2,z1,z2,false,false,false);
a59 4
  //Set up forcefield tables
  Force_Twobody& ftwobody = Force_Twobody::get();
  ftwobody.ReadTwobodyInteractions();
  ftwobody.SetupTwobodyInteractions();
d62 11
d74 2
a75 1
  t.SetupTypes_Force();
d78 9
a88 1
  npairs = nparticles*(nparticles-1)/2;
d91 10
a100 1
  cout << "Number of twobody force types = " << ftwobody.get_ntypes() << endl;
d112 1
d114 11
@


1.1
log
@Starting source distribution for Grasp.
Basic molecular dynamics code with twobody interactions
@
text
@d17 1
d34 1
a34 1
  //Initialize box (flase indicates no pbc in that direction)
d36 4
a39 1
  //  Box& b = Box::get(x1,x2,y1,y2,z1,z2,false,false,false);
d46 5
d52 1
d54 2
a55 4
  b.SetupTypes();
  Particle_Types& t = Particle_Types::get();
  ntypes = t.get_ntypes();
  cout << "Number of particle types in box = " << ntypes << endl;
a56 1
  npairs = nparticles*(nparticles-1)/2;
@

