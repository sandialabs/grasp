head	1.1;
access;
symbols
	Monaco_Aidan:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2005.06.15.20.40.00;	author athomps;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.15.20.40.00;	author athomps;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.08.09.22.50.06;	author saubry;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.08.12.23.55.22;	author saubry;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.09.12.21.02.47;	author saubry;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2005.10.11.21.43.24;	author saubry;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2005.10.21.15.44.43;	author saubry;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2005.11.01.21.17.20;	author saubry;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2005.12.19.17.57.04;	author athomps;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2006.02.02.23.40.43;	author athomps;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file comm_octant.h was initially added on branch Monaco_Aidan.
@
text
@@


1.1.2.1
log
@Forgot to add Comm_Octant class files
@
text
@a0 105
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

//  Declarations for Comm_Octant class.
// 
#ifndef COMM_OCTANT_H
#define COMM_OCTANT_H

class Comm_Octant {
 private:
  MPI_Comm world;
  MPI_Comm universe;

  int me,nprocs;                    // proc info
  int procgrid[3];                  // # of procs in each dim
  int myloc[3];                     // which proc I am in each dim
  int procneigh[3][2];              // my 6 neighboring procs
                                    // left/down/back=[][0], right/up/front = [][1]
  int nswap;                        // # of swaps to perform, set to 3.

  int maxswap;                      // max # of swaps memory is allocated for
  vector<int> sendnum,recvnum;      // # of bins to send/recv in each swap
                                    // No guarantee same for all swaps
  vector<int> sendproc,recvproc;    // proc to send/recv to/from at each swap
                                    // derived from procneigh and octant id
  vector<int*> pbc_flags;           // flags for sending atoms thru PBC
                                    // [0] = 1 if any dim is across PBC
                                    // [123] = +/-1 if dim 012 is across PBC

  vector<vector<int> > sendlist;    // list of bins to send in each swap
  vector<int> maxsendlist;          // max size of send list for each swap
  vector<vector<int> > recvlist;    // list of bins to send in each swap
  vector<int> maxrecvlist;          // max size of send list for each swap

  vector<double> buf_send;          // send buffer for all comm
  vector<double> buf_recv;          // recv buffer for all comm
  int maxsend;                      // current size of send buffer
  int maxrecv;                      // current size of recv buffer

  void grow_send(int);              // reallocate send buffer
  void grow_recv(int);              // free/allocate recv buffer
  void grow_sendlist(int, int);     // reallocate one sendlist
  void grow_recvlist(int, int);     // reallocate one recvlist
  void grow_swap();                 // grow swap arrays
  void allocate_swap(int);          // allocate swap arrays
  void free_swap();                 // free swap arrays

 public:
  Comm_Octant();
  ~Comm_Octant();
  // setup 3d communication pattern
  void Setup(Comm*, const int[]);
  // perform communication of atom coords  
  void communicate(const Box*, BinList*, Comm*);
  // reverse comm of forces
  void reverse_communicate(const Box*, BinList*, Comm*);
  // constuct lists of bins for each send and receive.
  void SetupLists();

  friend class Octant;
};

#endif
@


1.1.2.2
log
@Link communication scheme with send bins.
@
text
@d91 2
a92 3
  Comm_Octant(){};
  ~Comm_Octant(){};

d94 1
a94 1
  void Setup(Comm*, const int[],int [3],int [3]);
d96 1
a96 2
  void communicate(OctantList*, Comm*,const Box*,
		   vector <Bin *>[3],vector <Bin *>[3]);
d98 1
a98 2
  void reverse_communicate(OctantList*, Comm*,const Box*,
			   vector <Bin *>[3],vector <Bin *>[3]);
d100 1
a100 1
  void SetupLists(int [3],int [3]);
@


1.1.2.3
log
@Problem with pbc_flags.
Update recent modifications.
@
text
@a104 10
  void get_pbc_flags(vector <int*> flags) {
    for (int iswap=0;iswap<nswap;iswap++) 
      for (int i=0;i<4;i++) 
	{
	  flags[iswap][i] = pbc_flags[iswap][i];
	}
  }

  int Setup_flags(Comm*,const int []);

@


1.1.2.4
log
@Correct boundary flags.
Implement send/receive bins.
@
text
@d91 1
a91 1
  Comm_Octant();
@


1.1.2.5
log
@Correct several bugs
@
text
@d95 1
a95 1
  void Setup(Comm*, const int[], vector <Bin *>[3],vector <Bin *> [3]);
d103 1
a103 1
  void SetupLists(vector <Bin *>[3],vector <Bin *> [3]);
d113 2
@


1.1.2.6
log
@Correct a few things.
@
text
@d94 1
d96 8
a103 1
  void SetupLists(vector <Bin *>[3],vector <Bin *> [3],Comm *);
d105 7
a111 2
  void communicate(Comm*,const Box*, BinList *, BinTools*);
  void reverse_communicate(Comm*,const Box*, BinList*,BinTools*);
@


1.1.2.7
log
@Add a pointer to particle instead of an array of particle.

Bug in particles coordinates.
@
text
@d97 2
a98 4
  void communicate(Comm*,const Box*, BinList *, BinTools*, 
		   vector <Bin *>[3], vector <Bin *>[3]);
  void reverse_communicate(Comm*,const Box*, BinList*, BinTools*, 
		   vector <Bin *>[3], vector <Bin *>[3]);
@


1.1.2.8
log
@Bin Communication fixed
@
text
@d97 1
a97 1
  void communicate(ParticleList*, Comm*,const Box*, BinList *, BinTools*, 
d99 1
a99 1
  void reverse_communicate(ParticleList*, Comm*,const Box*, BinList*, BinTools*, 
@


1.1.2.9
log
@Added EAM energy change calculation
@
text
@d97 1
a97 1
  void communicate(ParticleList*, Comm*,const Box*, BinList *, 
d99 1
a99 1
  void reverse_communicate(ParticleList*, Comm*,const Box*, BinList*, 
@


