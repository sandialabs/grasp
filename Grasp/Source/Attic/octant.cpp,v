head	1.1;
access;
symbols
	Monaco_Aidan:1.1.6.3.0.2
	Root-of-Monaco_Aidan:1.1.6.3
	Monaco:1.1.0.6
	PreMonaco:1.1
	PMONACO:1.1.0.4
	P_MonacoSource:1.1.0.2;
locks; strict;
comment	@// @;


1.1
date	2005.04.07.00.04.52;	author saubry;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2005.04.07.00.04.52;	author saubry;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.04.08.00.04.39;	author saubry;	state Exp;
branches;
next	;

1.1.4.1
date	2005.04.12.22.58.05;	author saubry;	state Exp;
branches;
next	;

1.1.6.1
date	2005.05.03.22.14.52;	author athomps;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2005.05.03.22.53.08;	author aslepoy;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2005.05.04.21.45.57;	author saubry;	state Exp;
branches
	1.1.6.3.2.1;
next	;

1.1.6.3.2.1
date	2005.06.15.20.29.11;	author athomps;	state Exp;
branches;
next	1.1.6.3.2.2;

1.1.6.3.2.2
date	2005.07.08.23.16.36;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.3;

1.1.6.3.2.3
date	2005.08.04.18.28.14;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.4;

1.1.6.3.2.4
date	2005.08.09.22.50.06;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.5;

1.1.6.3.2.5
date	2005.08.12.23.55.22;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.6;

1.1.6.3.2.6
date	2005.09.12.21.02.47;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.7;

1.1.6.3.2.7
date	2005.10.11.21.43.24;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.8;

1.1.6.3.2.8
date	2005.10.21.15.44.43;	author saubry;	state Exp;
branches;
next	1.1.6.3.2.9;

1.1.6.3.2.9
date	2006.02.02.23.40.43;	author athomps;	state Exp;
branches;
next	1.1.6.3.2.10;

1.1.6.3.2.10
date	2006.02.16.00.32.33;	author athomps;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file octant.cpp was initially added on branch P_MonacoSource.
@
text
@@


1.1.6.1
log
@Added new files to Monaco branch.
@
text
@a0 76
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~
#include <cmath>
#include <vector>
#include <string>
#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "particle.h"
#include "vec3.h"
#include "binlist.h"
#include "bin.h"
#include "forcefield.h"
#include "box.h"
#include "box_inline.h"
#include "fixed_object.h"
#include "particlelist.h"
#include "forcefieldlist.h"
#include "machine.h"
#include "comm.h"
#include "log.h"
#include "octant.h"

extern Log glog;

Octant::Octant()
{
  for(int i=0;i<6;i++) octregion[i]=0.0;
  for(int i=0;i<3;i++) send_proc_id[i] = 0;
  for(int i=0;i<3;i++) rec_proc_id[i] = 0;
}
@


1.1.6.2
log
@my first steps :-)
@
text
@a76 2

//what the heck happened here??
@


1.1.6.3
log
@Region for octant's ghost bins implemented
@
text
@d77 2
@


1.1.6.3.2.1
log
@Added class Comm_Octant
@
text
@a67 1
#include "comm_octant.h"
d71 2
a72 4
Octant::Octant() {
  oct_id[0] = 0;
  oct_id[1] = 0;
  oct_id[2] = 0;
a75 22
  comm_octant = NULL;
}

Octant::Octant(const int i, const int j, const int k, const double regc[]) {
  oct_id[0] = i;
  oct_id[1] = j;
  oct_id[2] = k;
  for(int i=0;i<6;i++) octregion[i]=regc[i];
  for(int i=0;i<3;i++) send_proc_id[i] = 0;
  for(int i=0;i<3;i++) rec_proc_id[i] = 0;
  comm_octant = NULL;
}

void Octant::get_oct_id(int oct_id_out[]) const {
  oct_id_out[0] = oct_id[0];
  oct_id_out[1] = oct_id[1];
  oct_id_out[2] = oct_id[2];
}

void Octant::Setup(Comm* comm) {
  comm_octant = new Comm_Octant;
  comm_octant->Setup(comm, oct_id);
@


1.1.6.3.2.2
log
@Implement correctly bin and ghost bin lists
@
text
@a100 1

a101 7







@


1.1.6.3.2.3
log
@Implement Alex's algorithm to send specific octant bin lists.
No communication implemented yet.
@
text
@d72 1
a72 2
Octant::Octant() 
{
d82 1
a82 2
Octant::Octant(const int i, const int j, const int k, const double regc[]) 
{
d92 1
a92 2
void Octant::get_oct_id(int oct_id_out[]) const 
{
d98 1
a98 2
void Octant::Setup(Comm* comm) 
{
@


1.1.6.3.2.4
log
@Link communication scheme with send bins.
@
text
@d101 1
a101 1
void Octant::Setup(Comm* comm,int send[3],int recv[3]) 
d104 2
a105 1
  comm_octant->Setup(comm,oct_id,send,recv);
@


1.1.6.3.2.5
log
@Problem with pbc_flags.
Update recent modifications.
@
text
@d103 1
@


1.1.6.3.2.6
log
@Correct boundary flags.
Implement send/receive bins.
@
text
@d83 18
@


1.1.6.3.2.7
log
@Correct several bugs
@
text
@a79 7

  my_binlist.resize(0);
  my_procbinlist.resize(0);
  
  for(int i=0;i<3;i++) my_sendbinlist[i].resize(0);
  for(int i=0;i<3;i++) my_recvbinlist[i].resize(0);

d83 1
a83 1
void Octant::set_sendbins(const int &n, vector<Bin *> bin)
d85 1
a85 2
  for (int i = 0; i < bin.size(); i++)
    my_sendbinlist[n][i] = bin[i];
d89 5
a93 5
void Octant::set_recvbins(const int &n, vector<Bin *> bin)
{
  for (int i = 0; i < bin.size(); i++)
    my_recvbinlist[n][i] = bin[i];
}
@


1.1.6.3.2.8
log
@Correct a few things.
@
text
@d78 2
d89 13
@


1.1.6.3.2.9
log
@Added EAM energy change calculation
@
text
@d80 1
a80 1
  my_ghostbinlist.resize(0);
a86 7

void Octant::Cycle(ParticleList* p, Comm* comm, const Box* b, 
		   BinList* bl,ForceFieldList* ff) {
  bl->Cycle(p,my_binlist,ff,b,comm);
}


@


1.1.6.3.2.10
log
@Added transmutation move (semigrand ensemble)
@
text
@d90 1
a90 2
  bl->Translate(p,my_binlist,ff,b,comm);
  bl->Transmutate(p,my_binlist,ff,b,comm);
@


1.1.4.1
log
@*** empty log message ***
@
text
@a0 32
#include <cmath>
#include <vector>
#include <string>
#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "particle.h"
#include "vec3.h"
#include "binlist.h"
#include "bin.h"
#include "forcefield.h"
#include "box.h"
#include "box_inline.h"
#include "fixed_object.h"
#include "particlelist.h"
#include "forcefieldlist.h"
#include "machine.h"
#include "comm.h"
#include "log.h"
#include "octant.h"

extern Log glog;

Octant::Octant()
{
  for(int i=0;i<6;i++) octregion[i]=0.0;
  for(int i=0;i<3;i++) send_proc_id[i] = 0;
  for(int i=0;i<3;i++) rec_proc_id[i] = 0;
}
@


1.1.2.1
log
@Fusion of ALex and Sylvie's versions.
Implementation of bins.
Add energy change.

saubry (04-06-05)
@
text
@a0 42
#include <cmath>
#include <vector>
#include <string>
#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "particle.h"
#include "vec3.h"
#include "binlist.h"
#include "bin.h"
#include "forcefield.h"
#include "box.h"
#include "box_inline.h"
#include "fixed_object.h"
#include "particlelist.h"
#include "forcefieldlist.h"
#include "machine.h"
#include "comm.h"
#include "log.h"
#include "octant.h"

extern Log glog;

Octant::Octant()
{
	clear();
}

void Octant::clear()
{
	 my_bin_list.clear();
	 send_bin_list.clear();
	 for(int i=0;i<6;i++) octregion[i]=0.0;
	 for(int i=0;i<3;i++) send_proc_id[i] = 0;
	 for(int i=0;i<3;i++) rec_proc_id[i] = 0;

}


@


1.1.2.2
log
@Modify binlist to create bins array locally (to each proc).
Begin implementing octantlist.

saubry (04-07-05).
@
text
@d29 1
a29 3
  for(int i=0;i<6;i++) octregion[i]=0.0;
  for(int i=0;i<3;i++) send_proc_id[i] = 0;
  for(int i=0;i<3;i++) rec_proc_id[i] = 0;
d31 12
@


