head	1.1;
access;
symbols
	Monaco_Aidan:1.1.6.1.0.2
	Root-of-Monaco_Aidan:1.1.6.1
	Monaco:1.1.0.6
	PreMonaco:1.1
	PMONACO:1.1.0.4
	P_MonacoSource:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2005.04.07.00.04.52;	author saubry;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2005.04.07.00.04.52;	author saubry;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.04.08.00.04.39;	author saubry;	state Exp;
branches;
next	;

1.1.4.1
date	2005.04.12.22.58.05;	author saubry;	state Exp;
branches;
next	;

1.1.6.1
date	2005.05.03.22.14.52;	author athomps;	state Exp;
branches
	1.1.6.1.2.1;
next	;

1.1.6.1.2.1
date	2005.06.15.20.29.11;	author athomps;	state Exp;
branches;
next	1.1.6.1.2.2;

1.1.6.1.2.2
date	2005.07.08.23.16.36;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.3;

1.1.6.1.2.3
date	2005.07.20.23.18.47;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.4;

1.1.6.1.2.4
date	2005.08.09.22.50.06;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.5;

1.1.6.1.2.5
date	2005.08.12.23.55.22;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.6;

1.1.6.1.2.6
date	2005.09.12.21.02.47;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.7;

1.1.6.1.2.7
date	2005.10.11.21.43.24;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.8;

1.1.6.1.2.8
date	2005.10.21.15.44.43;	author saubry;	state Exp;
branches;
next	1.1.6.1.2.9;

1.1.6.1.2.9
date	2006.02.02.23.40.43;	author athomps;	state Exp;
branches;
next	1.1.6.1.2.10;

1.1.6.1.2.10
date	2006.02.06.19.15.25;	author athomps;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file octant.h was initially added on branch P_MonacoSource.
@
text
@@


1.1.6.1
log
@Added new files to Monaco branch.
@
text
@a0 87
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef OCTANT_H
#define OCTANT_H

#include <vector>
using namespace std;

class Bin;

class Octant{

 public:
	 Octant();
	 ~Octant(){};

	 vector<Bin *> my_binlist;
	 vector<Bin *> my_ghostbinlist;
	 vector<Bin *> send_binlist;
	 double octregion[6];

	 inline void set_octregion(double in[6]) {
		 for (int i = 0; i < 6; i++) octregion[i] = in[i];
	 };

	 inline void add_my_bin(Bin *b){my_binlist.push_back(b);};
	 inline void add_send_bin(Bin *b){send_binlist.push_back(b);};

 private:
	 int send_proc_id[3];
	 int rec_proc_id[3];

 public:
	 void get_octregion(double out[6]) {
	   for (int i = 0; i < 6; i++) out[i] = octregion[i];
	 };

	 vector <Bin*> get_my_binlist() {return my_binlist;};
	 vector <Bin*> get_my_ghostbinlist() {return my_ghostbinlist;};
	 vector <Bin*> get_send_binlist() {return send_binlist;};

};

#endif
@


1.1.6.1.2.1
log
@Added class Comm_Octant
@
text
@d31 1
a31 1
//    This software is distributed under the terms of the GNU Public
d52 2
a57 2
	 //	 Octant(const Octant&);
	 Octant(const int, const int, const int, const double[]);
a58 4
	 void Setup(Comm*);
	 void get_oct_id(int[]) const;

	 Comm_Octant* comm_octant;
a62 1
	 vector<Bin *> recv_binlist;
a68 6
	 inline void set_oct_id(const int& i, const int& j, const int& k) {
	   oct_id[0] = i;
	   oct_id[1] = j;
	   oct_id[2] = k;
	 };

a70 1
	 inline void add_recv_bin(Bin *b){recv_binlist.push_back(b);};
a72 1
	 int oct_id[3];
@


1.1.6.1.2.2
log
@Implement correctly bin and ghost bin lists
@
text
@d56 1
a73 4
	 inline void set_octloc(int ol[6]){
	   for (int i = 0; i < 6; i++) oct_loc[i] = ol[i];
	 }

a88 2
	 int oct_loc[6];

a93 4
	 inline void get_octloc(int ol[6]){
	   for (int i = 0; i < 6; i++) ol[i] = oct_loc[i];
	 }

@


1.1.6.1.2.3
log
@Implementation of 2 routines:
1./ Return ghost bins of an octant on the proc. of that octant.
2./ Return bins of a given translated region.
@
text
@a64 2
	 vector<Bin *> my_procbinlist;

d67 1
a68 1
	 double octregion[6];
a104 1
	 vector <Bin*> get_my_procbinlist() {return my_procbinlist;};
@


1.1.6.1.2.4
log
@Link communication scheme with send bins.
@
text
@d52 2
a53 2
class Octant
{
d55 34
a88 30
  Octant();
  Octant(const int, const int, const int, const double[]);
  ~Octant(){};
  void Setup(Comm*,int [3],int [3]);
  void get_oct_id(int[]) const;
  
  Comm_Octant* comm_octant;
  
  vector<Bin *> my_binlist;
  vector<Bin *> my_ghostbinlist;
  vector<Bin *> my_procbinlist;
  
  vector<Bin *> my_sendbinlist[3];
  vector<Bin *> my_recvbinlist[3];
  
  double octregion[6];
  inline void set_octregion(double in[6]) {
    for (int i = 0; i < 6; i++) octregion[i] = in[i];
  };

  inline void set_octloc(int ol[6]){
    for (int i = 0; i < 6; i++) oct_loc[i] = ol[i];
  }
  
  inline void set_oct_id(const int& i, const int& j, const int& k) {
    oct_id[0] = i;
    oct_id[1] = j;
    oct_id[2] = k;
  };
  
d90 6
a95 6
  int oct_id[3];
  int send_proc_id[3];
  int rec_proc_id[3];
  
  int oct_loc[6];
  
d97 13
a109 11
  void get_octregion(double out[6]) {
    for (int i = 0; i < 6; i++) out[i] = octregion[i];
  };
  
  inline void get_octloc(int ol[6]){
    for (int i = 0; i < 6; i++) ol[i] = oct_loc[i];
  }
  
  vector <Bin*> get_my_binlist() {return my_binlist;};
  vector <Bin*> get_my_ghostbinlist() {return my_ghostbinlist;};
  vector <Bin*> get_my_procbinlist() {return my_procbinlist;};
@


1.1.6.1.2.5
log
@Problem with pbc_flags.
Update recent modifications.
@
text
@a99 5


  inline void get_oct_id(int id[3]){
    for (int i = 0; i < 3; i++) id[i] = oct_id[i];
  }
@


1.1.6.1.2.6
log
@Correct boundary flags.
Implement send/receive bins.
@
text
@d56 1
d59 1
a60 9
 private:
  int send_proc_id[3];
  int rec_proc_id[3];

  int oct_id[3];
  int oct_loc[6];
  double octregion[6];
  
 public:
d70 1
d80 3
a82 1
    oct_id[0] = i; oct_id[1] = j; oct_id[2] = k;
d84 11
a94 3

  inline void set_oct_id(int id[3]) {
    for (int i = 0; i < 3; i++) oct_id[i] = id[i];
d97 4
a100 1
 public:
a103 1
    //cout << oct_id[0] << endl;
a104 8

  inline void get_octloc(int ol[6]){
    for (int i = 0; i < 6; i++) ol[i] = oct_loc[i];
  }

  void get_octregion(double out[6]) {
    for (int i = 0; i < 6; i++) out[i] = octregion[i];
  };
@


1.1.6.1.2.7
log
@Correct several bugs
@
text
@d57 1
a65 2

  int translate[3];
d71 1
d76 1
a76 9

  void set_sendbins(const int &, vector<Bin *>);
  void set_recvbins(const int &, vector<Bin *>);

 public:
  inline void set_translate(int in[3]) {
    for (int i = 0; i < 3; i++) translate[i] = in[i];
  };

a94 5
  inline void get_translate(int id[3]){
    for (int i = 0; i < 3; i++) id[i] = translate[i];
  }
  

d97 1
d109 1
@


1.1.6.1.2.8
log
@Correct a few things.
@
text
@d59 3
d66 2
d71 3
a73 1
  // contain only send/recv bins ids.
d77 3
d81 3
a83 2
  vector<Bin *> my_binlist;
  vector<Bin *> my_procbinlist;
a84 1
 public:
d102 6
a121 6

  void get_sendbins(vector <Bin *> sb[3]) {
    for (int i = 0; i < 3; i++) sb[i] = my_sendbinlist[i];};

  void get_recvbins(vector <Bin *> rb[3]) {
    for (int i = 0; i < 3; i++) rb[i] = my_recvbinlist[i];};
@


1.1.6.1.2.9
log
@Added EAM energy change calculation
@
text
@a68 1
  void Octant::Cycle(ParticleList*, Comm*, const Box*, BinList*, ForceFieldList*);
d72 1
a72 1
  vector<Bin *> my_ghostbinlist;
d105 1
a105 1
  vector <Bin*> get_my_ghostbinlist() {return my_ghostbinlist;};
@


1.1.6.1.2.10
log
@Added in bin reallocation in montecarlo.cpp
@
text
@d69 1
a69 1
  void Cycle(ParticleList*, Comm*, const Box*, BinList*, ForceFieldList*);
@


1.1.4.1
log
@*** empty log message ***
@
text
@a0 69
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: September 22, 2004
//    Version: 3.0
//
//    Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//------------------------------------------------------------------------ 
/////:EOH~

#ifndef OCTANT_H
#define OCTANT_H

#include <vector>
using namespace std;

class Bin;

class Octant{

 public:
	 Octant();
	 ~Octant(){};

	 vector<Bin *> my_binlist;
	 vector<Bin *> send_binlist;
	 double octregion[6];

	 inline void set_octregion(double in[6]) {
		 for (int i = 0; i < 6; i++) octregion[i] = in[i];
	 };

	 inline void add_my_bin(Bin *b){my_binlist.push_back(b);};
	 inline void add_send_bin(Bin *b){send_binlist.push_back(b);};

 private:
	 int send_proc_id[3];
	 int rec_proc_id[3];

 public:
	 void get_octregion(double out[6]) {
	   for (int i = 0; i < 6; i++) out[i] = octregion[i];
	 };

	 vector <Bin*> get_my_binlist() {return my_binlist;};
	 vector <Bin*> get_send_binlist() {return send_binlist;};

};

#endif
@


1.1.2.1
log
@Fusion of ALex and Sylvie's versions.
Implementation of bins.
Add energy change.

saubry (04-06-05)
@
text
@a0 76
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: September 22, 2004
//    Version: 3.0
//
//    Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//------------------------------------------------------------------------ 
/////:EOH~

#ifndef OCTANT_H
#define OCTANT_H

#include <vector>
using namespace std;

class Bin;

class Octant{

 public:
	 Octant();
	 ~Octant(){};

	 vector<Bin *> my_bin_list;
	 vector<Bin *> send_bin_list;
	 double octregion[6];

	 inline void set_octregion(double in[6]) {
		 for (int i = 0; i < 6; i++) octregion[i] = in[i];
	 };

	 inline void set_octregion(double in0,double in1,double in2,
			double in3,double in4,double in5) {
		 octregion[0] = in0;octregion[1] = in1;octregion[2] = in2;
		 octregion[3] = in3;octregion[4] = in4;octregion[5] = in5;
	 };


	 inline void add_my_bin(Bin *b){my_bin_list.push_back(b);};
	 inline void add_send_bin(Bin *b){send_bin_list.push_back(b);};

 private:

	 int send_proc_id[3];
	 int rec_proc_id[3];

	 void clear();

 public:
	 void get_octregion(double out [6]) {
	   for (int i = 0; i < 6; i++) out[i] = octregion[i];
	 };

};

#endif
@


1.1.2.2
log
@Modify binlist to create bins array locally (to each proc).
Begin implementing octantlist.

saubry (04-07-05).
@
text
@d44 2
a45 2
	 vector<Bin *> my_binlist;
	 vector<Bin *> send_binlist;
d52 9
a60 2
	 inline void add_my_bin(Bin *b){my_binlist.push_back(b);};
	 inline void add_send_bin(Bin *b){send_binlist.push_back(b);};
d63 1
d67 2
d70 1
a70 1
	 void get_octregion(double out[6]) {
a73 3
	 vector <Bin*> get_my_binlist() {return my_binlist;};
	 vector <Bin*> get_send_binlist() {return send_binlist;};

@


