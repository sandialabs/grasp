head	1.1;
access;
symbols
	PreMonaco:1.1
	PMONACO:1.1.0.4
	P_MonacoSource:1.1.0.2;
locks; strict;
comment	@// @;


1.1
date	2005.01.14.17.37.07;	author saubry;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2005.01.14.17.37.07;	author saubry;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.14.17.54.34;	author saubry;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.02.17.21.41.38;	author saubry;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.02.23.19.34.30;	author saubry;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2005.02.24.21.03.59;	author saubry;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2005.02.26.00.35.18;	author saubry;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2005.03.01.19.00.24;	author saubry;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2005.04.07.00.04.52;	author saubry;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2005.04.07.16.13.44;	author saubry;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2005.04.08.00.04.39;	author saubry;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2005.04.12.16.31.04;	author saubry;	state Exp;
branches;
next	;

1.1.4.1
date	2005.04.12.22.58.05;	author saubry;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file p_monaco.cpp was initially added on branch P_MonacoSource.
@
text
@@


1.1.4.1
log
@*** empty log message ***
@
text
@a0 259
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: September 22, 2004
//    Version: 3.0
//
//    Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//------------------------------------------------------------------------ 
/////:EOH~

#include <string>
#include <vector>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cmath>
#include <sstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "constants.h"
#include "octantlist.h"
#include "octant.h"
#include "p_monaco.h"
#include "particlelist.h"
#include "particle.h"
#include "neighbor.h"
#include "forcefield.h"
#include "forcefieldlist.h"
#include "box.h"
#include "output.h"
#include "bin.h"
#include "binlist.h"
#include "comm.h"
#include "log.h"
#include "fixlist.h"
extern Log glog;
extern Constants constants;

MonteCarlo::MonteCarlo() {}

void MonteCarlo::Setup(const ParticleList* p, const Box* b, Comm* comm, ForceFieldList *ffl) {

	int node;

	node = comm->get_node();
	if (node == 0) {
		glog.logfile << "\n\n\n";
		glog.logfile << "Entering MonteCarlo::Setup()" << endl;
	}
	if (comm->get_Lnodefile()) {
		comm->get_nodefile() << "Entering Monte Carlo::Setup()" << endl;
	}


	// BinList
	BinList* bl = new BinList();
	bl->Setup(p,b,comm,ffl);

	// OctantList
	//OctantList* oc = new OctantList();
	//oc->Setup(bl,b,comm,ffl);

}

void MonteCarlo::Run(const int nsteps, const double timestep, 
		     Box* b, ParticleTypeList* t,
		     ParticleList* p,ForceFieldList* ff,
		     Output* outp,FixList* fix_list,Comm* comm) 
{
  double t0,t1;
  
  t0 = MPI_Wtime();
  for (int istep=1;istep<=nsteps;istep++) 
    
    for (int oct = 0; oct < 8; oct++)
      {
	
	Front(timestep,b,t,p,ff,fix_list,comm);
	Sweep(timestep,b,t,p,ff,fix_list,comm);
	Back(timestep,b,t,p,ff,fix_list,comm);
      }
  
  t1 = MPI_Wtime();
  glog.timetotal = t1-t0;
  

 // Simple example for energy change
  int atom = 1;

  // Test first energy change routine 
  double ec = EnergyChange0(&atom,b,t,p,ff,comm);

  // Test second energy change routine in force_eam.cpp
  bool Lenergy;
  Lenergy = true;
  ff->ComputeEnergyChange(&atom,Boost,Lenergy,b,t,p,comm);
}

void MonteCarlo::Front(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

  receive_ghost_buffer();
  unpack_ghost_buffer();
 
}

void MonteCarlo::Sweep(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

	Particle propose;

	vector<Particle> particles;


	for(int part_i = 0;part_i != particles.size(); part_i ++)
	{
		propose_move(particles[part_i], propose);
		update(decide(energy_change(particles[part_i], propose)));
	}
}

void MonteCarlo::Back(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

   pack_ghost_buffer();
   send_ghost_buffer();

}

int MonteCarlo::calc_next_octant(){return (current_octant+1)%8;}

void MonteCarlo::pack_ghost_buffer(){}
void MonteCarlo::unpack_ghost_buffer(){}

void MonteCarlo::receive_ghost_buffer(){}
void MonteCarlo::send_ghost_buffer(){}

void MonteCarlo::propose_move(Particle current_particle, Particle &propose){}
double MonteCarlo::energy_change(Particle current_particle, Particle &propose){return 0.0;}
bool MonteCarlo::decide(double){return true;}
void MonteCarlo::update(bool){}


// Brute Force method to calculate energy change.
double MonteCarlo::EnergyChange0(int* atom, Box* b, ParticleTypeList* t, 
				ParticleList* p, ForceFieldList* ff, Comm* comm) 
{
  // initialization
  double energy0 = 0.0, energy1 = 0.0;
  double ep1=0.0,em1=0.0,ep0=0.0,em0=0.0;
  ParticleList* q;
  q = p;

  ForceField* const* forcefields;
  int node;
  int nforcefields;
  vector<double> tmp;
  vector<double> e_ff;
  int npieces;

  // calculate initial energy
  node = comm->get_node();

  ff->Neighboring(p, b, comm, false);  
  ff->ComputeForce(true,ForceFieldList::none,b,t,p,comm);

  forcefields = ff->get_forcefields();
  nforcefields = ff->get_nforcefields();
  for (int iff = 0;iff<nforcefields;iff++) 
    {
      ForceField* ffiff = forcefields[iff];
      npieces = ffiff->get_npieces();
      tmp = ffiff->get_energy();
      e_ff.resize(npieces);
      MPI_Allreduce(&tmp[0],&e_ff[0],npieces,MPI_DOUBLE,
		    MPI_SUM,comm->get_world());
      if (node == 0) 
	{
	  em0 += e_ff[0];
	  ep0 += e_ff[1];
	  for (int ipiece=0;ipiece<npieces;ipiece++) 
	    energy0 += e_ff[ipiece];
	}


    }
  MPI_Bcast(&energy0,1,MPI_DOUBLE,0,comm->get_world());

 // apply MC move
  q->ModifyParticle(atom,Boost);

  // calculate final energy
  node = comm->get_node();

  ff->Neighboring(q, b, comm, false);  
  ff->ComputeForce(true,ForceFieldList::none,b,t,q,comm);

  forcefields = ff->get_forcefields();
  nforcefields = ff->get_nforcefields();
  for (int iff = 0;iff<nforcefields;iff++) 
    {
      ForceField* ffiff = forcefields[iff];
      npieces = ffiff->get_npieces();
      tmp = ffiff->get_energy();
      e_ff.resize(npieces);
      MPI_Allreduce(&tmp[0],&e_ff[0],npieces,MPI_DOUBLE,
		    MPI_SUM,comm->get_world());
      if (node == 0) 
	{
	  em1 += e_ff[0];
	  ep1 += e_ff[1];
	  for (int ipiece=0;ipiece<npieces;ipiece++) 
	    energy1 += e_ff[ipiece];
	}
    }
  MPI_Bcast(&energy1,1,MPI_DOUBLE,0,comm->get_world());

  if (node == 0)
    {
      glog.logfile  << "Energy Change (1) :" << energy1 -  energy0 << "\n";
      glog.logfile << "      Embedding = " << em1-em0 << "\n";
      glog.logfile << "      Pair      = " << ep1-ep0 << "\n";
    }

  vector <double> boost2;
  boost2.resize(3);
  boost2[0] = -Boost[0];
  boost2[1] = -Boost[1];
  boost2[2] = -Boost[2];
  q->ModifyParticle(atom,boost2);
  ff->Neighboring(q, b, comm, false);  
  
  return energy1-energy0;
}


@


1.1.2.1
log
@Implementation of brute force energy change for Monte Carlo.
Includes P_Monaco class which does nothing for now except calling energy change.
Sylvie Aubry, Jan. 14 2005
@
text
@a0 180
//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: September 22, 2004
//    Version: 3.0
//
//    Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//------------------------------------------------------------------------ 
/////:EOH~

// Added saubry (01-13-05)
// brute force to get energy change


#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>
#include <sstream>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "p_monaco.h"
#include "constants.h"
#include "particlelist.h"
#include "neighbor.h"
#include "forcefield.h"
#include "forcefieldlist.h"
#include "output.h"
#include "comm.h"
#include "log.h"
extern Log glog;
extern Constants constants;


MonteCarlo::MonteCarlo() 
{
}

void MonteCarlo::Setup(Comm* comm)
{
  int node,nprocs;
  string str_tmp;

  node = comm->get_node();

  if (node == 0) {
    glog.logfile << "\n\n\n";
    glog.logfile << "Entering P_Monaco::Setup()" << endl;
  }

  if (comm->get_Lnodefile()) {
    comm->get_nodefile() << "Entering P_Monaco::Setup()" << endl;
  }


  nprocs = comm->get_nprocs();

  if (nprocs > 1) {
    glog.error("P_Monaco::Setup:\n"
	       "P_Monaco only setup for single process");
  }


  nprocs = comm->get_nprocs();

  if (nprocs > 1) {
    glog.error("P_Monaco::Setup:\n"
	       "P_Monaco only setup for single process");
  }

  glog.logfile << "P_Monaco - Monte Carlo in parallel";
}

void MonteCarlo::Run(Box* b, ParticleTypeList* t, ParticleList* p, ForceFieldList* ff, 
		     Comm* comm) 
{
 // Simple example
  int atom = 1;
  double boost[3];
  boost[0] = 0.;
  boost[1] = 0.;
  boost[2] = 0.;

  int node;
  node = comm->get_node();

  double ec = EnergyChange(&atom,boost,b,t,p,ff,comm);

  // output
  if (node == 0)
    glog.logfile << "Energy Change = " << ec << "\n";

}

double MonteCarlo::EnergyChange(int* atom, double boost[], Box* b, ParticleTypeList* t, 
				ParticleList* p, ForceFieldList* ff, Comm* comm) 
{
  // initialization
  double energy0 = 0., energy1 = 0.;
  ParticleList* q;
  q = p;

  ForceField* const* forcefields;
  int node;
  int nforcefields;
  vector<double> tmp;
  vector<double> e_ff;
  int npieces;

  // calculate initial energy
  node = comm->get_node();

  ff->Neighboring(p, b, comm, false);  
  ff->ComputeForce(true,ForceFieldList::none,b,t,p,comm);

  forcefields = ff->get_forcefields();
  nforcefields = ff->get_nforcefields();
  for (int iff = 0;iff<nforcefields;iff++) 
    {
      ForceField* ffiff = forcefields[iff];
      npieces = ffiff->get_npieces();
      tmp = ffiff->get_energy();
      e_ff.resize(npieces);
      MPI_Allreduce(&tmp[0],&e_ff[0],npieces,MPI_DOUBLE,
		    MPI_SUM,comm->get_world());
      if (node == 0) 
	for (int ipiece=0;ipiece<npieces;ipiece++) 
	  energy0 += e_ff[ipiece];
    }
  MPI_Bcast(&energy0,1,MPI_DOUBLE,0,comm->get_world());

 // apply MC move
  q->ModifyParticle(atom,boost);

  // calculate final energy
  node = comm->get_node();

  ff->Neighboring(q, b, comm, false);  
  ff->ComputeForce(true,ForceFieldList::none,b,t,q,comm);

  forcefields = ff->get_forcefields();
  nforcefields = ff->get_nforcefields();
  for (int iff = 0;iff<nforcefields;iff++) 
    {
      ForceField* ffiff = forcefields[iff];
      npieces = ffiff->get_npieces();
      tmp = ffiff->get_energy();
      e_ff.resize(npieces);
      MPI_Allreduce(&tmp[0],&e_ff[0],npieces,MPI_DOUBLE,
		    MPI_SUM,comm->get_world());
      if (node == 0) 
	for (int ipiece=0;ipiece<npieces;ipiece++) 
	  energy1 += e_ff[ipiece];
    }
  MPI_Bcast(&energy1,1,MPI_DOUBLE,0,comm->get_world());

  return energy1-energy0;
}

@


1.1.2.2
log
@Trial of the branch...
Sylvie Aubry, Jan. 14 2005.
@
text
@d31 1
a31 1
// brute force to get energy change - 
@


1.1.2.3
log
@Implement energy change.
Two ways are implemented:
     -  brute force,
     -  removal of the energy of atom before being boosted
        and addition of the energy of the boosted atoms.
Brute force is for every force field. Other method is for EAM only for now.


Sylvie Aubry - 02-17-05
@
text
@d31 1
a31 1
// brute force to get energy change 
d100 1
a100 2
  vector <double> boost;
  boost.resize(3);
d108 1
a108 2
  // Test first energy change routine 
  double ec = EnergyChange0(&atom,boost,b,t,p,ff,comm);
d112 1
a112 1
    glog.logfile << "\nEnergy Change = " << ec << "\n";
a113 12
  // Test second energy change routine in force_eam.cpp

  bool Lenergy;
  ForceFieldList::VirialStyles Lvirial;

  Lenergy = true;
  Lvirial = ForceFieldList::none;

  ff->Neighboring(p,b,comm,false);
  ff->ComputeEnergyChange(&atom,boost,Lenergy,Lvirial,b,t,p,comm);
  
  // output
d116 1
a116 3

// Brute Force method to calculate energy change.
double MonteCarlo::EnergyChange0(int* atom, vector <double> boost, Box* b, ParticleTypeList* t, 
d135 1
a135 2

 ff->ComputeForce(true,ForceFieldList::none,b,t,p,comm);
a180 1

@


1.1.2.4
log
@Corrections to the energy change routines.
@
text
@d102 3
a104 3
  boost[0] = 1.0;
  boost[1] = 1.0;
  boost[2] = 1.0;
d112 4
d117 1
d119 2
a121 1
  ForceFieldList::VirialStyles Lvirial;
d136 1
a136 2
  double energy0 = 0.0, energy1 = 0.0;
  double ep1=0.0,em1=0.0,ep0=0.0,em0=0.0;
d165 2
a166 8
	{
	  em0 += e_ff[0];
	  ep0 += e_ff[1];
	  for (int ipiece=0;ipiece<npieces;ipiece++) 
	    energy0 += e_ff[ipiece];
	}


d190 2
a191 6
	{
	  em1 += e_ff[0];
	  ep1 += e_ff[1];
	  for (int ipiece=0;ipiece<npieces;ipiece++) 
	    energy1 += e_ff[ipiece];
	}
a194 11
  cout << "Energy Change (1) :" << energy1 -  energy0 << "\n";
  cout << "      Embedding = " << em1-em0 << "\n";
  cout << "      Pair      = " << ep1-ep0 << "\n";

  vector <double> boost2;
  boost2.resize(3);
  boost2[0] = -boost[0];
  boost2[1] = -boost[1];
  boost2[2] = -boost[2];
  q->ModifyParticle(atom,boost2);
  
@


1.1.2.5
log
@Update changes.
@
text
@d106 3
d115 2
d118 2
a119 1
  ff->ComputeEnergyChange(&atom,boost,Lenergy,b,t,p,comm);
d121 1
d146 2
a147 1
  ff->ComputeForce(true,ForceFieldList::none,b,t,p,comm);
a209 1
  ff->Neighboring(q, b, comm, false);  
@


1.1.2.6
log
@Correct problem in local energy change.
Need to define bigger box dimensions in input file.

Sylvie Aubry - 02/05/05.
@
text
@d112 1
@


1.1.2.7
log
@Add move class.
Start setting  up P-Monaco.

Sylvie Aubry (03-01-05).
@
text
@d55 5
d62 2
a63 1
  int node;
d76 16
d100 5
d107 1
a107 1
  double ec = EnergyChange0(&atom,b,t,p,ff,comm);
d112 2
a113 1
  ff->ComputeEnergyChange(&atom,Boost,Lenergy,b,t,p,comm);
d118 1
a118 1
double MonteCarlo::EnergyChange0(int* atom, Box* b, ParticleTypeList* t, 
d163 1
a163 1
  q->ModifyParticle(atom,Boost);
d197 3
a199 3
  boost2[0] = -Boost[0];
  boost2[1] = -Boost[1];
  boost2[2] = -Boost[2];
d205 2
@


1.1.2.8
log
@Fusion of ALex and Sylvie's versions.
Implementation of bins.
Add energy change.

saubry (04-06-05)
@
text
@d30 4
a36 1
#include <iomanip>
d43 1
a44 3
#include "octantlist.h"
#include "octant.h"
#include "montecarlo.h"
a45 1
#include "particle.h"
a48 1
#include "box.h"
a49 2
#include "bin.h"
#include "binlist.h"
a51 1
#include "fixlist.h"
d55 3
a57 1
MonteCarlo::MonteCarlo() {}
d59 1
a59 12
void MonteCarlo::Setup(const ParticleList* p, const Box* b, Comm* comm, ForceFieldList *ffl) {

	int node;

	node = comm->get_node();
	if (node == 0) {
		glog.logfile << "\n\n\n";
		glog.logfile << "Entering MonteCarlo::Setup()" << endl;
	}
	if (comm->get_Lnodefile()) {
		comm->get_nodefile() << "Entering Monte Carlo::Setup()" << endl;
	}
d61 4
d66 3
a68 7
	// BinList
	BinList* bl = new BinList();
	bl->Setup(p,b,comm,ffl);

	// OctantList
	OctantList* oc = new OctantList();
	oc->Setup(bl,b,comm,ffl);
d70 1
d73 2
a74 4
void MonteCarlo::Run(const int nsteps, const double timestep, 
		     Box* b, ParticleTypeList* t,
		     ParticleList* p,ForceFieldList* ff,
		     Output* outp,FixList* fix_list,Comm* comm) 
d76 1
a76 18
  double t0,t1;
  
  t0 = MPI_Wtime();
  for (int istep=1;istep<=nsteps;istep++) 
    
    for (int oct = 0; oct < 8; oct++)
      {
	
	Front(timestep,b,t,p,ff,fix_list,comm);
	Sweep(timestep,b,t,p,ff,fix_list,comm);
	Back(timestep,b,t,p,ff,fix_list,comm);
      }
  
  t1 = MPI_Wtime();
  glog.timetotal = t1-t0;
  

 // Simple example for energy change
a87 47
void MonteCarlo::Front(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

  receive_ghost_buffer();
  unpack_ghost_buffer();
 
}

void MonteCarlo::Sweep(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

	Particle propose;

	vector<Particle> particles;


	for(int part_i = 0;part_i != particles.size(); part_i ++)
	{
		propose_move(particles[part_i], propose);
		update(decide(energy_change(particles[part_i], propose)));
	}
}

void MonteCarlo::Back(const double timestep, Box* b, ParticleTypeList* t,
           ParticleList* p,ForceFieldList* ff,
           FixList* fix_list,Comm* comm) {

   pack_ghost_buffer();
   send_ghost_buffer();

}

int MonteCarlo::calc_next_octant(){return (current_octant+1)%8;}

void MonteCarlo::pack_ghost_buffer(){}
void MonteCarlo::unpack_ghost_buffer(){}

void MonteCarlo::receive_ghost_buffer(){}
void MonteCarlo::send_ghost_buffer(){}

void MonteCarlo::propose_move(Particle current_particle, Particle &propose){}
double MonteCarlo::energy_change(Particle current_particle, Particle &propose){return 0.0;}
bool MonteCarlo::decide(double){return true;}
void MonteCarlo::update(bool){}

@


1.1.2.9
log
@Correct small error.
@
text
@d43 1
a43 1
#include "p_monaco.h"
@


1.1.2.10
log
@Modify binlist to create bins array locally (to each proc).
Begin implementing octantlist.

saubry (04-07-05).
@
text
@d241 3
a243 6
  if (node == 0)
    {
      glog.logfile  << "Energy Change (1) :" << energy1 -  energy0 << "\n";
      glog.logfile << "      Embedding = " << em1-em0 << "\n";
      glog.logfile << "      Pair      = " << ep1-ep0 << "\n";
    }
a254 2


@


1.1.2.11
log
@Correct binparticles routine.
Add map index.

saubry 04-12-05
@
text
@d80 2
a81 2
	//OctantList* oc = new OctantList();
	//oc->Setup(bl,b,comm,ffl);
@


