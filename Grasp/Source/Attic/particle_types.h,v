head	2.1;
access;
symbols
	PreMonaco:2.1;
locks; strict;
comment	@ * @;


2.1
date	2003.04.24.19.37.50;	author athomps;	state dead;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.21.23.10.03;	author athomps;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.18.23.15.17;	author athomps;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.00.12.41;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.18.00.20.49;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.08.23.25.54;	author athomps;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Removing obsolete files from version 2.
@
text
@#ifndef PARTICLE_TYPES_H
#define PARTICLE_TYPES_H

class Forcefield;

// Data structure for particle types
class Particle_Types {
 private:
  int ntypes;
  // List of particle ids, indexed by particle type.
  vector<string> id_index;
  // List of particle masses, indexed by particle
  vector<double> mass_list;
  // List of twobody particle type lists, indexed by particle type.
  // One list for each forcefield in Box::forcefield_list
  vector<int*> type_index;
 public:
  Particle_Types();
  void ReadParticleTypes();
  bool find_id(const string&, int&) const;
  void SetupTypes_Force(const vector <Forcefield*>);
  int get_ntypes() const;
  int get_ff_type(const int&, const int&) const;
  double get_type_mass(const int&) const;
  int* get_type_index(const int&) const;

  ~Particle_Types();
};

// INLINE(inline) FUNCTION DEFINITIONS
//
// Inlining inner loop operations provides significant performance gain
//
inline int Particle_Types::get_ff_type(const int& i, 
				       const int& itype_in) const {
    return type_index[i][itype_in];
}

#endif


@


2.0
log
@*** empty log message ***
@
text
@@


1.5
log
@Fixed a variety of bugs related to energy conservation.
Add kinetic energy and temperature calculation.
LJ and Stillinger-Weber forcefields fully tested against
TOWHEE and energy conservation.
@
text
@@


1.4
log
@Created an abstract class Forcefield, with derived classes Force_Twobody
and Force_Threebody.
Implemented Stillinger-Weber forcefield within Force_Threebody.
Unfortunately, the COSP neighboring method does not work for
threebody forces, so we currently do not have neighbor lists
for threebody interactions.  Probably need to use LAMMPS-like
ghost atom method and standard neighbor list structures.
@
text
@d11 1
a11 1
  vector<int> id_index;
d20 1
a20 1
  bool find_id(const int&, int&) const;
@


1.3
log
@

Added neighbor list object.
@
text
@d4 2
a6 1
// Uses singleton construction same as that of class Box.
d14 3
a16 8
  // List of twobody particle types, indexed by particle type.
  vector<int> twobody_type_index;
  Particle_Types() {
    ntypes = 0;
    return;
  };
  Particle_Types(const Particle_Types&);

d18 1
a18 1
  static Particle_Types& get();
d21 3
a23 5
  void SetupTypes_Force(const bool&, const bool&);
  int get_ntypes() const {
    return ntypes;
    };
  int get_twobody_type(const int&) const;
d25 1
d27 1
a27 3
  ~Particle_Types(){
    return;
    };
d30 7
a36 2
inline int Particle_Types::get_twobody_type(const int& itype_in) const {
    return twobody_type_index[itype_in];
d38 1
@


1.2
log
@
Added ReadParticleTypes, and improved organization of input,
including error checking.
@
text
@d25 1
a25 1
  void SetupTypes_Force();
@


1.1
log
@Starting source distribution for Grasp.
Basic molecular dynamics code with twobody interactions
@
text
@d9 6
a14 1
  vector<int> id_index,twobody_type_index;
d23 3
a25 1
  int AddType(const int&);
d30 2
@

