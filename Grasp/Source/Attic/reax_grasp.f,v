head	3.2;
access;
symbols
	PreMonaco:3.2
	REAX-2:3.2.2.11
	REAXFF:3.2.0.2;
locks; strict;
comment	@c @;


3.2
date	2004.12.16.23.40.44;	author athomps;	state dead;
branches
	3.2.2.1;
next	3.1;

3.1
date	2004.12.16.23.07.39;	author athomps;	state Exp;
branches;
next	;

3.2.2.1
date	2004.12.16.23.59.24;	author athomps;	state Exp;
branches;
next	3.2.2.2;

3.2.2.2
date	2004.12.22.22.59.07;	author athomps;	state Exp;
branches;
next	3.2.2.3;

3.2.2.3
date	2005.01.07.22.51.01;	author athomps;	state Exp;
branches;
next	3.2.2.4;

3.2.2.4
date	2005.01.14.22.56.02;	author athomps;	state Exp;
branches;
next	3.2.2.5;

3.2.2.5
date	2005.01.21.22.24.30;	author athomps;	state Exp;
branches;
next	3.2.2.6;

3.2.2.6
date	2005.01.23.19.04.55;	author athomps;	state Exp;
branches;
next	3.2.2.7;

3.2.2.7
date	2005.01.29.01.44.20;	author athomps;	state Exp;
branches;
next	3.2.2.8;

3.2.2.8
date	2005.02.03.21.40.18;	author athomps;	state Exp;
branches;
next	3.2.2.9;

3.2.2.9
date	2005.02.09.07.14.57;	author athomps;	state Exp;
branches;
next	3.2.2.10;

3.2.2.10
date	2005.02.10.01.50.42;	author athomps;	state Exp;
branches;
next	3.2.2.11;

3.2.2.11
date	2005.03.30.23.32.07;	author athomps;	state Exp;
branches;
next	;


desc
@@


3.2
log
@Removed files inadvertently added to main branch
@
text
@**********************************************************************
*                                                                    *
*     REAXFF Reactive force field program                            *
*                                                                    *
*     Developed and written by Adri van Duin, duin@@wag.caltech.edu   *
*                                                                    *
*     Copyright (c) 2001-2010 California Institute of Technology     *
*                                                                    *
*     This is an open-source program. Feel free to modify its        *
*     contents. Please keep me informed of any useful modification   *
*     or addition that you made. Please do not distribute this       *
*     program to others; if people are interested in obtaining       *
*     a copy of this program let them contact me first.              *
*                                                                    *
********************************************************************** 
********************************************************************** 

      subroutine getswb(swb_tmp);

********************************************************************** 
      include 'cbka.blk'
      include 'cbkff.blk'
      real*8 swb_tmp

********************************************************************** 
*                                                                    *
*     Report the value of swb                                        *
*                                                                    *
********************************************************************** 

      swb_tmp = swb

      return
      end

********************************************************************** 

      subroutine getvrange(vrange_tmp)

********************************************************************** 
      implicit real*8 (a-h,o-z)
      include 'control.blk'
      real*8 vrange_tmp

********************************************************************** 
*                                                                    *
*     Report the value of vrange                                     *
*                                                                    *
********************************************************************** 

      vrange_tmp = vrange

      return
      end

********************************************************************** 

      subroutine getnvlist(nvlist_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer nvlist_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nvlist                                        *
*                                                                    *
********************************************************************** 

      nvlist_tmp = nvlist

      return
      end

********************************************************************** 

      subroutine getvlbora(vlbora_tmp);

********************************************************************** 
      implicit real*8 (a-h,o-z)
      include 'control.blk'
      real*8 vlbora_tmp

********************************************************************** 
*                                                                    *
*     Report the value of vlbora                                        *
*                                                                    *
********************************************************************** 

      vlbora_tmp = vlbora

      return
      end

@


3.2.2.1
log
@I hope this is adds all the REAX files to the REAXFF branch
@
text
@@


3.2.2.2
log
@Completed prototype of parallel ReaxFF in GRASP, including charge equilibration
@
text
@a94 62
**********************************************************************

      subroutine chargrasp(natot,elcvec,chgglobal)

**********************************************************************
      include 'cbka.blk'
      include 'cbkc.blk'
      include 'cbkch.blk'
      include 'cbkcha.blk'
      include 'cbkconst.blk'
      include 'cbkdcell.blk'
      include 'cbkenergies.blk'
      include 'cbkff.blk'
      include 'cbkia.blk'
      include 'cbkm.blk'
      include 'cbknvl.blk'
      include 'cbkpairs.blk'
      include 'cbktregime.blk'
      include 'cellcoord.blk'
      include 'control.blk'
      include 'cbkchb.blk'
      include 'small.blk'
      dimension elcvec(neem),chgglobal(neem)

      integer ipiv(neem)
      real*8 work(5*neem)

**********************************************************************
*                                                                    *
*     Determine charges on atoms: matrix suuplied by Grasp           *
*                                                                    *
**********************************************************************
      if (ndebug.eq.1) then
      open (65,file='fort.65',status='unknown',access='append')
      write (65,*) 'In chargrasp'
      call timer(65)
      close (65)
      end if
      ech=zero
      cfield=332.0638
      
      if (ioldchg .ne. 0) then
         do i1=1,natot
            ch(i1)=zero
            chgold(i1)=zero
         end do

         call fillmatrix(natot+1,xmortr,neem) ! fill in top half of matrix
         call dcopy(natot+1,chgold,1,chgglobal,1)
         call cgsolve(natot+1,xmortr,neem,chgglobal,elcvec,mdstep)
      else
         call dcopy(natot+1,elcvec,1,chgglobal,1)
         call dsysv('L',natot+1,1,xmortr,neem,ipiv,
     $        chgglobal,neem,work,5*neem,info)
         if (info .ne. 0) stop 'dsysv solved failed in charcrys'
         ioldchg=1              ! Only called once
      endif
      call dcopy(natot,chgglobal,1,chgold,1) ! Save the charges

      return
      end
**********************************************************************
@


3.2.2.3
log
@Finished optimized implementation of ReaxFF.
Eliminates O(N^2) scaling of srttor and srtang.
Also blanks out the ghost bonds that are not in dihedral
with local atom.
@
text
@d110 1
@


3.2.2.4
log
@Fixed bug in reax_cbkch.h, switched neem to nat
@
text
@d148 1
a148 1
         if (info .ne. 0) stop 'dsysv solved failed in chargrasp'
@


3.2.2.5
log
@Implemented a parallel CG scheme. Does not exploit sparsity and
so is still quite slow.
@
text
@d97 1
a97 1
      subroutine chargrasp()
d114 7
d123 1
a123 1
*     Placeholder for cbkm common block                              *
d126 27
a155 83


c$$$**********************************************************************
c$$$
c$$$      subroutine chargrasp(natot,elcvec,chgglobal)
c$$$
c$$$**********************************************************************
c$$$      include 'cbka.blk'
c$$$      include 'cbkc.blk'
c$$$      include 'cbkch.blk'
c$$$      include 'cbkcha.blk'
c$$$      include 'cbkconst.blk'
c$$$      include 'cbkdcell.blk'
c$$$      include 'cbkenergies.blk'
c$$$      include 'cbkff.blk'
c$$$      include 'cbkia.blk'
c$$$      include 'cbkm.blk'
c$$$      include 'cbkpairs.blk'
c$$$      include 'cbktregime.blk'
c$$$      include 'cellcoord.blk'
c$$$      include 'control.blk'
c$$$      include 'cbkchb.blk'
c$$$      include 'small.blk'
c$$$      dimension elcvec(neem),chgglobal(neem)
c$$$
c$$$      integer ipiv(neem)
c$$$      real*8 work(5*neem)
c$$$
c$$$**********************************************************************
c$$$*                                                                    *
c$$$*     Determine charges on atoms: matrix suuplied by Grasp           *
c$$$*                                                                    *
c$$$**********************************************************************
c$$$      if (ndebug.eq.1) then
c$$$      open (65,file='fort.65',status='unknown',access='append')
c$$$      write (65,*) 'In chargrasp'
c$$$      call timer(65)
c$$$      close (65)
c$$$      end if
c$$$      ech=zero
c$$$      cfield=332.0638
c$$$      
c$$$c$$$      do i = 1,natot+1
c$$$c$$$         do j = 1,natot+1
c$$$c$$$            write(6,*) xmortr(i,j)
c$$$c$$$         end do
c$$$c$$$      end do
c$$$
c$$$c
c$$$c     On first iteration, generate initial guess
c$$$c     by assuming diagonal matrix 
c$$$c
c$$$      if (ioldchg.eq.0) then
c$$$         
c$$$         suma = 0.0
c$$$         do i = 1,natot
c$$$            suma = suma+1.0/xmortr(i,i)
c$$$         end do
c$$$         chpot = -elcvec(natot+1)   
c$$$         do i = 1,natot
c$$$            chpot = chpot+elcvec(i)/xmortr(i,i)
c$$$         end do
c$$$         chpot = chpot/suma
c$$$         do i = 1,natot
c$$$            chgold(i) = (elcvec(i)-chpot)/xmortr(i,i)
c$$$         end do
c$$$         chgold(natot+1) = chpot
c$$$         ioldchg=1             
c$$$      endif
c$$$
c$$$      call dcopy(natot+1,chgold,1,chgglobal,1)
c$$$      call cgsolve(natot+1,xmortr,neem,chgglobal,elcvec,mdstep)
c$$$c$$$      sumsq = 0.0
c$$$c$$$      do i = 1,natot+1
c$$$c$$$         sumsq = sumsq+(chgold(i)-chgglobal(i))**2
c$$$c$$$      end do
c$$$c$$$      write(6,*) sumsq
c$$$      
c$$$      call dcopy(natot+1,chgglobal,1,chgold,1) ! Save the charges
c$$$
c$$$      return
c$$$      end
**********************************************************************
@


3.2.2.6
log
@Added and removed some nodefile diagnostics.
@
text
@a94 40
********************************************************************** 

      subroutine getnval(nval_tmp);

********************************************************************** 
      include 'cbka.blk'
      include 'cbkvalence.blk'
      integer nval_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nval                                       *
*                                                                    *
********************************************************************** 

      nval_tmp = nval

      return
      end

********************************************************************** 

      subroutine getntor(ntor_tmp);

********************************************************************** 
      include 'cbka.blk'
      include 'cbktorsion.blk'
      integer ntor_tmp

********************************************************************** 
*                                                                    *
*     Report the torue of ntor                                       *
*                                                                    *
********************************************************************** 

      ntor_tmp = ntor

      return
      end

@


3.2.2.7
log
@Cleaned up charge eequilibration, removed some FORTRAN allocations
@
text
@d135 110
@


3.2.2.8
log
@Greatly reduced memory usage.
@
text
@d41 1
a41 1
      include 'cbka.blk'
d66 1
a66 1
*     Report the value of nvlist                                     *
d80 1
a80 1
      include 'cbka.blk'
@


3.2.2.9
log
@Added some error checking and some memory efficiency.
@
text
@a134 97

********************************************************************** 

      subroutine getnneighmax(nneighmax_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer nneighmax_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nneighmax                                       *
*                                                                    *
********************************************************************** 

      nneighmax_tmp = nneighmax

      return
      end

********************************************************************** 

      subroutine getnat(nat_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer nat_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nat                                       *
*                                                                    *
********************************************************************** 

      nat_tmp = nat

      return
      end

********************************************************************** 

      subroutine getnattot(nattot_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer nattot_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nattot                                       *
*                                                                    *
********************************************************************** 

      nattot_tmp = nattot

      return
      end

********************************************************************** 

      subroutine getnsort(nsort_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer nsort_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nsort                                       *
*                                                                    *
********************************************************************** 

      nsort_tmp = nsort 

      return
      end

********************************************************************** 

      subroutine getmbond(mbond_tmp);

********************************************************************** 
      include 'cbka.blk'
      integer mbond_tmp

********************************************************************** 
*                                                                    *
*     Report the value of mbond                                       *
*                                                                    *
********************************************************************** 

      mbond_tmp = mbond 

      return
      end


@


3.2.2.10
log
@Put array dimension parameters for C++ and fortran in a single header
file called reax_defs.h. Switched all fortran include statements
to cpp #include statements. Added new-lines to all *.blk files.
@
text
@d21 2
a22 2
#include "cbka.blk"
#include "cbkff.blk"
d41 2
a42 2
#include "cbka.blk"
#include "control.blk"
d61 1
a61 1
#include "cbka.blk"
d80 2
a81 2
#include "cbka.blk"
#include "control.blk"
d100 2
a101 2
#include "cbka.blk"
#include "cbkvalence.blk"
d120 2
a121 2
#include "cbka.blk"
#include "cbktorsion.blk"
d141 1
a141 1
#include "cbka.blk"
d160 1
a160 1
#include "cbka.blk"
d179 1
a179 1
#include "cbka.blk"
d198 1
a198 1
#include "cbka.blk"
d217 1
a217 1
#include "cbka.blk"
@


3.2.2.11
log
@Separated charge equilibration input from REAX
@
text
@a37 20
      subroutine getswa(swa_tmp);

********************************************************************** 
#include "cbka.blk"
#include "cbkff.blk"
      real*8 swa_tmp

********************************************************************** 
*                                                                    *
*     Report the value of swa                                        *
*                                                                    *
********************************************************************** 

      swa_tmp = swa

      return
      end

********************************************************************** 

a230 20
********************************************************************** 

      subroutine getnso(nso_tmp);

********************************************************************** 
#include "cbka.blk"
#include "cbkff.blk"
      integer nso_tmp

********************************************************************** 
*                                                                    *
*     Report the value of nso                                        *
*                                                                    *
********************************************************************** 

      nso_tmp = nso

      return
      end

@


3.1
log
@Finally, this is the REAXFF branch, first pass
@
text
@@

