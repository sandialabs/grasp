head	1.1;
access;
symbols
	PPPM_Crozier2:1.1.0.2;
locks; strict;
comment	@// @;


1.1
date	2005.06.20.22.21.43;	author pscrozi;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.20.22.21.43;	author pscrozi;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file remap_wrap.cpp was initially added on branch PPPM_Crozier2.
@
text
@@


1.1.2.1
log
@latest version of PPPM for Grasp
@
text
@a0 56
/* ----------------------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   www.cs.sandia.gov/~sjplimp/lammps.html
   Steve Plimpton, sjplimp@@sandia.gov, Sandia National Laboratories

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under 
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */

#include <vector>
#include <fstream>
using namespace std;
#include "mpi.h"
#include "remap_wrap.h"
#include "grasp.h"
#include "particle.h"
#include "particlelist.h"
#include "particlelist_inline.h"
#include "fft3d_wrap.h"
#include "comm.h"
#include "log.h"
extern Log glog;

/* ---------------------------------------------------------------------- */

Remap::Remap(MPI_Comm comm,
	     int in_ilo, int in_ihi, int in_jlo, int in_jhi,
	     int in_klo, int in_khi,
	     int out_ilo, int out_ihi, int out_jlo, int out_jhi,
	     int out_klo, int out_khi,
	     int nqty, int permute, int memory, int precision)
{
  plan = remap_3d_create_plan(comm,
			      in_ilo,in_ihi,in_jlo,in_jhi,in_klo,in_khi,
			      out_ilo,out_ihi,out_jlo,out_jhi,out_klo,out_khi,
			      nqty,permute,memory,precision);
  if (plan == NULL) glog.error("Could not create 3d remap plan");
}

/* ---------------------------------------------------------------------- */

Remap::~Remap()
{
  remap_3d_destroy_plan(plan);
}

/* ---------------------------------------------------------------------- */

void Remap::perform(double *in, double *out, double *buf)
{
  remap_3d(in,out,buf,plan);
}
@

