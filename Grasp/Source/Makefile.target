#-----------------------------------------------------------------------
#
#   G R A S P
#   ____________
#   \           \
#    \ General   \
#     \ Reactive  \
#      \ Atomistic \
#       \ Simulation\
#        \ Program   \
#         \___________\
#
#    Timestamp: April 1, 2005
#    Version: 4.0
#
#    Primary Author: Aidan P. Thompson
#
#    e-mail: athomps@sandia.gov
#   
#    Copyright (2005) Sandia National Laboratories
#
#    Sandia National Laboratories is a multiprogram laboratory 
#    operated by Sandia Corporation, a Lockheed Martin company,
#    for the United States Department of Energy under contract
#    No. DE-AC04-94AL-85000.
#
#    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
#    Corporation, the U.S. Government retains certain rights in 
#    this software.
#
#    This software is distributed under the terms of the GNU Public 
#    License (GPL). For a copy of the GPL see the file 
#    Grasp/Documentation/LICENSE or visit the GNU website at 
#    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
#    entitles you to use the software, modify it and redistribute it. 
#    The main thing you can not do is apply any other licensing 
#    terms to the software. Also, if any part of this sofware is added 
#    to other software, then that software must also be released under 
#    the GPL.
#
#    This software comes with no warranty of any kind. 
#
#----------------------------------------------------------------------- 
#///:EOH~
#*******************************************
# Do not edit this file!
#******************************************
#
# Variable _ARCH identifies the name of the directory
# in which object files are saved, and also identifies
# which compiler options are specified in Makefile
# The variable DEFAULT_ARCH contains the default value.
# DEFAULT_ARCH is set in the main makefile (Makefile)
# To choose a different value, users can edit this, 
# or invoke make using
#     make _ARCH = <user's architecture>
#
.SUFFIXES:
# Find the target directory(ies).
#
# Assign a default value _ARCH
USED_DEFAULT_ARCH = 0
ifndef _ARCH
# This method insufficiently flexible
#  _ARCH := $(shell uname -s)
  USED_DEFAULT_ARCH = 1
 _ARCH := $(DEFAULT_ARCH)
  export _ARCH
endif

OBJDIR := Obj_$(_ARCH)
#
# If ReaxFF turned on, use a different target directory
#
ifeq (true,$(_REAX))
	OBJDIR := Obj_$(_ARCH)_reax
endif
export OBJDIR

# Define the rules to build in the target subdirectories.
#
MAKETARGET = $(MAKE) --no-print-directory -C $@ -f $(CURDIR)/Makefile \
		SRCDIR=$(CURDIR) $(MAKECMDGOALS)

.PHONY: $(OBJDIR)
$(OBJDIR):
	+@mkdir -p $@
	+@$(MAKETARGET)

# These rules keep make from trying to use the match-anything rule below to
# rebuild the makefiles--ouch!  Obviously, if you don't follow my convention
# of using a `.mk' suffix on all non-standard makefiles you'll need to change
# the pattern rule.
#
# If you mess this up, the recursion will generate weird errors.
#
# for example: invoking 'make clean _ARCH=serial' yields: 
#      make[1]: *** No rule to make target `clean'.  Stop.
#      make: *** [Obj_serial] Error 2

Makefile : ;
Makefile.target :: ;

# Anything we don't know how to build will use this rule.  The command is a
# do-nothing command, but the prerequisites ensure that the appropriate
# recursive invocations of make will occur.
#
% :: $(OBJDIR) ;

# The clean rule is best handled from the source directory: since we're
# rigorous about keeping the target directories containing only target files
# and the source directory containing only source files, `clean' is as trivial
# as removing the target directories!
#
.PHONY: clean
ifeq ($(USED_DEFAULT_ARCH),0)
  clean:
	rm -rf $(OBJDIR)
else
  clean:
	@echo 'Not allowed to clean default targets'
	@echo 'Use: make clean _ARCH=$(DEFAULT_ARCH)'
endif
