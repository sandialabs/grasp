head	4.1;
access;
symbols
	ReverseComm_branch:4.0.0.16
	ADTools_branch:4.0.0.14
	Monaco_Aidan:4.0.0.12
	Root-of-Monaco_Aidan:4.0
	PPPM_Crozier2:4.0.0.10
	PPPM_Crozier:4.0
	Root-of-PPPM_Crozier:4.0
	Monaco:4.0.0.8
	PreMonaco:4.0
	Recovery-2004-04-12:4.0
	BRANCH:4.0.0.6
	PMONACO:4.0.0.4
	ROOT:4.0
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:1.2.0.4
	cjkimme_version_merge_from_trunk_1:1.2
	cjkimme_version:1.2.0.2;
locks; strict;
comment	@ * @;


4.1
date	2007.03.12.04.00.03;	author athomps;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches
	4.0.10.1;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.02.18.25.17;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.02.16.51.58;	author athomps;	state Exp;
branches;
next	;

4.0.10.1
date	2005.06.16.22.23.41;	author pscrozi;	state Exp;
branches;
next	;


desc
@@


4.1
log
@Added fix deformation command to allow box shape to be changed over time
@
text
@/* -----------------------------------------------------------------------
   LAMMPS 2003 (July 31) - Molecular Dynamics Simulator
   Sandia National Laboratories, www.cs.sandia.gov/~sjplimp/lammps.html
   Steve Plimpton, sjplimp@@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under 
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------ */

/* Dummy defs for MPI stubs */

#define MPI_COMM_WORLD 0

#define MPI_INT 1
#define MPI_FLOAT 2
#define MPI_DOUBLE 3
#define MPI_CHAR 4
#define MPI_BYTE 5

#define MPI_SUM 1
#define MPI_MAX 2
#define MPI_MIN 3

#define MPI_Comm int
#define MPI_Request int
#define MPI_Status int
#define MPI_Datatype int
#define MPI_Op int

#define MPI_PROC_NULL -1

/* Function prototypes for MPI stubs */

void MPI_Init(int *argc, char ***argv);
void MPI_Comm_rank(MPI_Comm comm, int *me);
void MPI_Comm_size(MPI_Comm comm, int *nprocs);
void MPI_Abort(MPI_Comm comm, int errorcode);
void MPI_Finalize();
double MPI_Wtime();
double MPI_Wtick();

void MPI_Send(void *buf, int count, MPI_Datatype datatype,
	      int dest, int tag, MPI_Comm comm);
void MPI_Rsend(void *buf, int count, MPI_Datatype datatype,
	       int dest, int tag, MPI_Comm comm);
void MPI_Recv(void *buf, int count, MPI_Datatype datatype,
	      int source, int tag, MPI_Comm comm, MPI_Status *status);
void MPI_Irecv(void *buf, int count, MPI_Datatype datatype,
	       int source, int tag, MPI_Comm comm, MPI_Request *request);
void MPI_Wait(MPI_Request *request, MPI_Status *status);
void MPI_Waitany(int count, MPI_Request *request, int *index, 
		 MPI_Status *status);
void MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);

void MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *comm_out);
void MPI_Comm_dup(MPI_Comm comm, MPI_Comm *comm_out);
void MPI_Comm_free(MPI_Comm *comm);

void MPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods,
		     int reorder, MPI_Comm *comm_cart);
void MPI_Cart_get(MPI_Comm comm, int maxdims, int *dims, int *periods,
		  int *coords);
void MPI_Cart_shift(MPI_Comm comm, int direction, int displ,
		    int *source, int *dest);

void MPI_Barrier(MPI_Comm comm);
void MPI_Bcast(void *buf, int count, MPI_Datatype datatype,
	       int root, MPI_Comm comm);
void MPI_Allreduce(void *sendbuf, void *recvbuf, int count,
		   MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
void MPI_Reduce(void *sendbuf, void *recvbuf, int count,
		   MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
void MPI_Scan(void *sendbuf, void *recvbuf, int count,
	      MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
void MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
		   void *recvbuf, int recvcount, MPI_Datatype recvtype,
		   MPI_Comm comm);
void MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
		    void *recvbuf, int *recvcounts, int *displs,
		    MPI_Datatype recvtype, MPI_Comm comm);
void MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts,
			MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
@


4.0
log
@This is version 4.0
@
text
@d34 2
@


4.0.10.1
log
@latest additions to the PPPM FF
@
text
@a54 4
void MPI_Sendrecv(void *sbuf, int scount, MPI_Datatype sdatatype,
		  int dest, int stag, void *rbuf, int rcount,
		  MPI_Datatype rdatatype, int source, int rtag,
		  MPI_Comm comm, MPI_Status *status);
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@@


1.2
log
@Added MPI_Reduce to STUBS and profile.cpp
@
text
@@


1.1
log
@Reported to cygwin. Added Steve Plimpton's STUBS directory
to enable compilation of serial version (Makefile.cygwin_serial).
Fixed some minor bugs and non-standard code.
@
text
@d73 2
@

