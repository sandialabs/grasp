head	4.4;
access;
symbols
	ReverseComm_branch:4.0.0.16
	ADTools_branch:4.0.0.14
	Monaco_Aidan:4.0.0.12
	Root-of-Monaco_Aidan:4.0
	PPPM_Crozier2:4.0.0.10
	PPPM_Crozier:4.0
	Root-of-PPPM_Crozier:4.0
	Monaco:4.0.0.8
	PreMonaco:4.0
	Recovery-2004-04-12:4.0
	BRANCH:4.0.0.6
	PMONACO:4.0.0.4
	ROOT:4.0
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0;
locks; strict;
comment	@c @;


4.4
date	2007.03.15.22.01.01;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2006.12.12.06.57.32;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2006.11.28.06.24.21;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2006.11.09.20.13.52;	author athomps;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches
	4.0.16.1;
next	1.1;

1.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	;

4.0.16.1
date	2006.11.08.04.18.38;	author athomps;	state Exp;
branches;
next	4.0.16.2;

4.0.16.2
date	2006.11.09.00.20.53;	author athomps;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Fixed some FORTRAN lapses and changed dump timestep to write timestep
@
text
@**********************************************************************
*                                                                    *
*     REAXFF Reactive force field program                            *
*                                                                    *
*     Developed and written by Adri van Duin, duin@@wag.caltech.edu   *
*                                                                    *
*     Copyright (c) 2001-2010 California Institute of Technology     *
*                                                                    *
*     This is an open-source program. Feel free to modify its        *
*     contents. Please keep me informed of any useful modification   *
*     or addition that you made. Please do not distribute this       *
*     program to others; if people are interested in obtaining       *
*     a copy of this program let them contact me first.              *
*                                                                    *
********************************************************************** 
********************************************************************** 
*                                                                    *
*     REAXFF Reactive force field program                            *
*                                                                    *
*     Developed and written by Adri van Duin, duin@@wag.caltech.edu   *
*                                                                    *
*     Copyright (c) 2001-2010 California Institute of Technology     *
*                                                                    *
*     This is an open-source program. Feel free to modify its        *
*     contents. Please keep me informed of any useful modification   *
*     or addition that you made. Please do not distribute this       *
*     program to others; if people are interested in obtaining       *
*     a copy of this program let them contact me first.              *
*                                                                    *
********************************************************************** 
********************************************************************** 

      subroutine encalc

********************************************************************** 
#include "cbka.blk"
#include "cbkc.blk"
#include "cbkcha.blk"
#include "cbkconst.blk"
#include "cbkd.blk"
#include "cbkdcell.blk"
#include "cbkenergies.blk"
#include "cellcoord.blk"
#include "control.blk"
#include "small.blk"
********************************************************************** 
*                                                                    *
*     Calculate energy and first derivatives                         *
*                                                                    *
********************************************************************** 
c$$$      if (ndebug.eq.1) then
c$$$C      open (65,file='fort.65',status='unknown',access='append')
c$$$      write (65,*) 'In encalc'
c$$$      call timer(65)
c$$$      close (65)
c$$$      end if
      estrc=0.0
      do i1=1,na
      do i2=1,3
      d(i2,i1)=0.0
      estrain(i1)=0.0
      end do
      end do
      eb=zero
      ea=zero
      elp=zero
      emol=zero
      ev=zero
      ehb=zero
      ecoa=zero
      epen=zero
      et=zero
      eco=zero
      eres=zero
      eradbo=zero
      efi=zero

      if(Lvirial.eq.1) then
         do k1 = 1,6
            virial(k1) = zero
         end do
      endif

      if (Latomvirial.eq.1) then
      do i1=1,na
      do i2=1,6
      atomvirial(i2,i1)=0.0
      end do
      end do
      endif

      call boncor
      call lonpar
      call covbon
      call ovcor

      call srtang   !Determine valency angles
      call srttor   !Determine torsion angles
*     call srtoop   !Determine out of plane angles
      call srthb    !Determine hydrogen bonds
  
      call calval
      call valang
  
*     call oopang

      call torang
      call hbond
      !print *, 'called hbond'
      !print *, nchaud

      call nonbon
      call efield

      call restraint

c
c     Use this to print out fort.73-style energies
c     It only works correctly in serial mode
c
c      write (6,'(i8,1x,14(f21.10,1x))')mdstep+nprevrun,eb,ea,elp,
c     $emol,ev+epen,ecoa,ehb,et,eco,ew,ep,ech,efi

      estrc=eb+ea+elp+ev+ecoa+emol+epen+et+ehb+eco+ew+ep+ncha2*ech+efi
      if (estrc.gt.zero) return
      if (estrc.le.zero) then
      goto 10
      else
      write (*,*)mdstep
      write (92,*)eb,ea,elp,ev,ecoa,emol,epen,eoop,et,eco,ew,
     $ep,ech,eres,eradbo
      stop 'Energy not a number'
      end if

   10 continue
      return
      end
********************************************************************** 
********************************************************************** 

      subroutine init

********************************************************************** 
#include "cbka.blk"
#include "cbkatomcoord.blk"
#include "cbkc.blk"
#include "cbkcha.blk"
#include "cbkconst.blk"
#include "cbkdcell.blk"
#include "cbkdistan.blk"
#include "cbkenergies.blk"
#include "cbkia.blk"
#include "cbkimove.blk"
#include "cbkinit.blk"
#include "cbktregime.blk"
#include "cellcoord.blk"
#include "control.blk"
#include "opt.blk"
#include "small.blk"
********************************************************************** 
c$$$      if (ndebug.eq.1) then
c$$$C      open (65,file='fort.65',status='unknown',access='append')
c$$$      write (65,*) 'In init'
c$$$      call timer(65)
c$$$      close (65)
c$$$      end if
********************************************************************** 
*                                                                    *
*     Initialize variables                                           *
*                                                                    *
********************************************************************** 
      convmd=4.184*1.0d26
      pi=3.14159265
      avognr=6.0221367d23
      rdndgr=180.0/pi
      dgrrdn=1.0/rdndgr
      rgasc=8.314510
      caljou=4.184
      xjouca=1.0/caljou
      ech=zero
      zero=0.0
      one=1.0
      two=2.0
      three=3.0
      half=one/two
      nzero=0
      none=1
      ntwo=2
      nthree=3
      invt=0
      ndata2=0
      iheatf=0
      nradcount=0
      itemp=1
      xinh=zero
      ifieldx=0
      ifieldy=0
      ifieldz=0
      mdstep=0
      kx=0
      ky=0
      kz=0
      nit=0
      nbon=0
      angle(1)=90.0
      angle(2)=90.0
      angle(3)=90.0
      axiss(1)=zero
      axiss(2)=zero
      axiss(3)=zero
      do i1=1,nat
      id(i1,1)=0
      id(i1,2)=0
      id(i1,3)=0
      end do
      icgeo=0
      sumhe=zero
      ustime=zero
      systime=zero
      vpmax=zero
      vpmin=zero
      dseed=0
      iagain=0
      do i1=1,nat
      do i2=1,mbond+3
      ia(i1,i2)=0
      iag(i1,i2)=0
      end do
      end do

      ioldchg=0
      na=0
      nrestra=0
      nrestrav=0
      nrestrat=0
      nrestram=0
      tset=tsetor
      tm11=axis(1)
      tm21=zero
      tm31=zero
      tm22=axis(2)
      tm32=zero
      tm33=axis(3)
      qruid='NORMAL RUN'
c$$$      do i1=1,nat
c$$$      imove(i1)=1
c$$$      end do

********************************************************************** 
*                                                                    *
*     Write file headers                                             *
*                                                                    *
********************************************************************** 
Cc      open (71,file='fort.71',status='unknown',access='append')
c      write (71,10)
c      close (71)
Cc      open (73,file='fort.73',status='unknown',access='append')
c      write (73,20)
c      close (73)
c      if (ntrc.gt.0) then
Cc      open (75,file='fort.75',status='unknown',access='append')
c      write (75,30)
c      close (75)
c      end if
c      if (nmethod.eq.4) then
Cc      open (59,file='fort.59',status='unknown',access='append')
c      write (59,40)
c      close (59)
c      end if

      return
********************************************************************** 
*                                                                    *
*     Format part                                                    *
*                                                                    *
********************************************************************** 
   10 format ('   Iter. Nmol    Epot         Ekin      Etot ',
     $'       T(K)  Eaver(block) Eaver(total) Taver      Tmax   ',
     $' Pres(MPa)   sdev(Epot)  sdev(Eaver)    Tset      Timestep',
     $'    RMSG     Totaltime')
   20 format ('  Iter.      Ebond       Eatom       Elp        Emol',
     $'       Eval       Ecoa       Ehbo       Etors      Econj',
     $'      Evdw      Ecoul    Echarge  Efield')
   30 format ('   Iter.  Tsys    Tzone1  Tset1   Tzone2  Tset2')
   40 format ('    Iter.     a             b          c        px',
     $'(MPa)    py(MPa)      pz(MPa)     pset(MPa)  Volume ')
      end
********************************************************************** 
************************************************************************
 
      subroutine timer(nunit)
 
************************************************************************
#include "cbka.blk"
#include "cbkinit.blk"
      real timear
      real tarray(2)
#ifdef _IBM
      call dtime_(tarray,timear)
#else
      call dtime(tarray,timear)
#endif

      ustime=ustime+tarray(1)
      systime=systime+tarray(2)
      write (nunit,100)ustime,systime,ustime+systime
      return
  100 format ('User time:',f20.4,' System time:',f20.4,
     $' Total time:',f20.4)
      end
************************************************************************
************************************************************************
@


4.3
log
@Upgraded ReaxFF in Grasp to latest version
@
text
@d51 6
a56 6
      if (ndebug.eq.1) then
C      open (65,file='fort.65',status='unknown',access='append')
      write (65,*) 'In encalc'
      call timer(65)
      close (65)
      end if
d161 6
a166 6
      if (ndebug.eq.1) then
C      open (65,file='fort.65',status='unknown',access='append')
      write (65,*) 'In init'
      call timer(65)
      close (65)
      end if
d222 1
a222 1
      read (35,*)dseed
@


4.2
log
@Added atom energy and bonding output for ReaxFF
@
text
@d117 7
@


4.1
log
@Merged ReverseComm_branch back into main branch
@
text
@d61 1
@


4.0
log
@This is version 4.0
@
text
@a32 72
      subroutine calcpres

********************************************************************** 
#include "cbka.blk"
#include "cbkconst.blk"
#include "cbkdcell.blk"
#include "cbkenergies.blk"
#include "cbkinit.blk"
#include "cbkpres.blk"
#include "cellcoord.blk"
#include "control.blk"
#include "small.blk"
********************************************************************** 
*                                                                    *
*     Pressure calculation                                           *
*                                                                    *
********************************************************************** 
      if (ndebug.eq.1) then
C      open (65,file='fort.65',status='unknown',access='append')
      write (65,*) 'In calpres'
      call timer(65)
      close (65)
      end if

      deda(1)=0.0
      deda(2)=0.0
      deda(3)=0.0
      do i1=1,na
      do i2=1,3
      do ix=1,3
      do iy=0,2
      do iz=0,2
      i3=ix+3*iy+9*iz
      dxda=0.0
      dyda=0.0
      dzda=0.0
      if (i2.eq.1.and.ix.ne.2) then
      dxda=-float(ix-2)
      end if
      if (i2.eq.2.and.iy.ne.1) then
      dyda=-float(iy-1)
      end if
      if (i2.eq.3.and.iz.ne.1) then
      dzda=-float(iz-1)
      end if
      dedaxh=dxda*dcell(i2,i1,i3)
      dedayh=dyda*dcell(i2,i1,i3)
      dedazh=dzda*dcell(i2,i1,i3)
      deda(1)=deda(1)+dedaxh
      deda(2)=deda(2)+dedayh
      deda(3)=deda(3)+dedazh
      end do
      end do
      end do
      end do
      end do

      cpres=1.0e-24*avognr*xjouca
      volu=tm11*tm22*tm33
      presx=-deda(1)/(tm22*tm33*cpres)+2.*ekin/(3.d0*volu*cpres)
      presy=-deda(2)/(tm11*tm33*cpres)+2.*ekin/(3.d0*volu*cpres)
      presz=-deda(3)/(tm11*tm22*cpres)+2.*ekin/(3.d0*volu*cpres) !GPa
      presx=presx*1d+3
      presy=presy*1d+3
      presz=presz*1d+3 !in MPa
      pressu=(presx+presy+presz)/3.d0

      return
      end
********************************************************************** 
********************************************************************** 

a60 5
      if (icpres.eq.1) then
      do i3=1,27
      dcell(i2,i1,i3)=0.0
      end do
      end if
d76 14
a89 40
c$$$      if (icpres.eq.1) then
c$$$**********************************************************************
c$$$*                                                                    *
c$$$*     Calculate minimum images for NPT                               *
c$$$*                                                                    *
c$$$**********************************************************************
c$$$      do 30 i1=1,na-1
c$$$      do 30 i2=i1+1,na
c$$$      dx1=c(i1,1)-c(i2,1)
c$$$      dy1=c(i1,2)-c(i2,2)
c$$$      dz1=c(i1,3)-c(i2,3)
c$$$      dismin=1e+10
c$$$      do 35 k1=-1,1
c$$$      do 35 k2=-1,1
c$$$      do 35 k3=-1,1
c$$$      a1=dx1+k1*tm11
c$$$      a2=dy1+k1*tm21+k2*tm22
c$$$      a3=dz1+k1*tm31+k2*tm32+k3*tm33
c$$$      rr=sqrt(a1*a1+a2*a2+a3*a3)
c$$$      if (rr.lt.dismin) then
c$$$      dismin=rr
c$$$      ixsav=k1
c$$$      iysav=k2
c$$$      izsav=k3
c$$$      end if
c$$$   35 continue
c$$$      nmpx(i1,i2)=ixsav
c$$$      nmpx(i2,i1)=-ixsav
c$$$      nmpy(i1,i2)=iysav
c$$$      nmpy(i2,i1)=-iysav
c$$$      nmpz(i1,i2)=izsav
c$$$      nmpz(i2,i1)=-izsav
c$$$   30 continue
c$$$      end if
c$$$ 
c$$$      do i1=1,na
c$$$      nmpx(i1,i1)=0
c$$$      nmpy(i1,i1)=0
c$$$      nmpz(i1,i1)=0
c$$$      end do
d96 1
a96 1
      call srtang               !Determine valency angles
d100 1
a100 1

d103 1
a103 1

a115 20
      pressu=0.0
      if (icpres.eq.1) then
      call calcpres
      deda(1)=0.0
      deda(2)=0.0
      deda(3)=0.0
      do i1=1,na
      do i2=1,3
      do ix=1,3
      do iy=0,2
      do iz=0,2
      i3=ix+3*iy+9*iz
      d(i2,i1)=d(i2,i1)+dcell(i2,i1,i3)
      end do
      end do
      end do
      end do
      end do
      end if

@


4.0.16.1
log
@Added atom stress for ReaxFF
@
text
@d33 72
d133 5
d153 40
a192 11
      do k1 = 1,6
      virial(k1) = zero
      end do

      if (Latomvirial) then
      do i1=1,na
      do i2=1,6
      atomvirial(i2,i1)=0.0
      end do
      end do
      endif
d199 1
a199 1
      call srtang   !Determine valency angles
d203 1
a203 1
  
d206 1
a206 1
  
d219 20
@


4.0.16.2
log
@Finished adding atomic virial for ReaxFF force field
@
text
@d76 3
d80 1
a80 7
      if(Lvirial.eq.1) then
         do k1 = 1,6
            virial(k1) = zero
         end do
      endif

      if (Latomvirial.eq.1) then
@


1.1
log
@Merged REAX version with main version
@
text
@d1 14
@

