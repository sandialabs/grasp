head	4.3;
access;
symbols
	ReverseComm_branch:4.3.0.10
	ADTools_branch:4.3.0.8
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.1
	REAX-2:3.1
	P_MonacoSource:3.1.0.6
	GraspSource:3.1
	P_Monaco:3.1.0.4
	InitialGrasp:3.1
	REAXFF:3.1.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.7.0.2
	cjkimme_version_merge_from_trunk_1:2.5.2.2
	cjkimme_version:2.5.0.2;
locks; strict;
comment	@ * @;


4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.2;

3.2
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2004.10.22.22.30.16;	author cjkimme;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.7;

2.7
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.6;

2.6
date	2004.03.20.00.15.36;	author athomps;	state Exp;
branches;
next	2.5;

2.5
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches
	2.5.2.1;
next	2.4;

2.4
date	2003.11.26.22.51.14;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2003.10.20.22.05.45;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2003.09.18.15.49.57;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2003.06.17.19.08.11;	author athomps;	state Exp;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.17.17.14.18;	author athomps;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.25.23.12.59;	author athomps;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.25.23.06.37;	author athomps;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.21.23.10.03;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.18.23.15.17;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.18.00.19.05;	author athomps;	state Exp;
branches;
next	;

2.5.2.1
date	2004.09.09.21.01.42;	author cjkimme;	state Exp;
branches;
next	2.5.2.2;

2.5.2.2
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fixed glitch in header.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef BOX_INLINE_H
#define BOX_INLINE_H

#include <math.h>

// INLINE(inline) FUNCTION DEFINITIONS
//
// Inlining inner loop operations provides significant performance gain
//
//  Notes on Minimum Image Treatment
//
// Since the sign of the distance is arbitrary, we
// never shift a distance that is exactly plus or minus
// half a box-length.
//
// Note: These functions fail if delr is
// more than 2 box lengths in any direction. Hence, need
// to ensure that particles do not stray more than
// half box-length outside of central box.
//
// Here is a summary of important minimg equality conditions
//
//        Positions on )0,1[ are mapped onto [0,1).
//        Positions on [0,1) are left alone.
//        Distances on )-1,1( should not occur
//        Distances on )-0.5,0.5( are mapped (-0.5,0.5).
//        Distances on [-0.5,0.5] are left alone.

inline void Box::Minimg_Diff(const double r1[], const double r2[], double delr[]) const
     // Compute minimum image distance from r2 to r1.
{
  double delta;

  if (Lorthorhombic) {
    // Special treatment of orthorhombic box
    delr[0] = r1[0]-r2[0];
    if (fabs(delr[0]) > half_xprd) {
      if (delr[0] > 0)
	delr[0] = delr[0] - xprd;
      else if (delr[0] < 0)
	delr[0] = delr[0] + xprd;
    }

    delr[1] = r1[1]-r2[1];
    if (fabs(delr[1]) > half_yprd) {
      if (delr[1] > 0)
	delr[1] = delr[1] - yprd;
      else if (delr[1] < 0)
	delr[1] = delr[1] + yprd;
    }

    delr[2] = r1[2]-r2[2];
    if (fabs(delr[2]) > half_zprd) {
      if (delr[2] > 0)
	delr[2] = delr[2] - zprd;
      else if (delr[2] < 0)
	delr[2] = delr[2] + zprd;
    }
  } else {
    vec3_subtract(r1,r2,delr);

    delta = vec3_dot(delr,uc_rvh);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(delr,uc_lva,delr);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lva,delr,delr);
      else if (delta < 0.0)
	vec3_add(delr,uc_lva,delr);
	//	vec3_scaleadd(-ceil(delta-0.5),uc_lva,delr,delr);
    }

    delta = vec3_dot(delr,uc_rvk);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(delr,uc_lvb,delr);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lvb,delr,delr);
      else if (delta < 0.0)
	vec3_add(delr,uc_lvb,delr);
	//	vec3_scaleadd(-ceil(delta-0.5),uc_lvb,delr,delr);
    }

    delta = vec3_dot(delr,uc_rvl);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(delr,uc_lvc,delr);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lvc,delr,delr);
      else if (delta < 0.0)
	vec3_add(delr,uc_lvc,delr);
	//	vec3_scaleadd(-ceil(delta-0.5),uc_lvc,delr,delr);
    }

  }
}

inline void Box::Minimg_Diff_Shift(const double r1[], double r2[]) const
     // Shift r2 to minimum image distance from r1
{
  double delta;
  double delr[3];

  if (Lorthorhombic) {
    // Special treatment of orthorhombic box
    delta = r2[0]-r1[0];
    if (fabs(delta) > half_xprd) {
      if (delta > 0)
	r2[0] = r2[0] - xprd;
      else if (delta < 0)
	r2[0] = r2[0] + xprd;
    }

    delta = r2[1]-r1[1];
    if (fabs(delta) > half_yprd) {
      if (delta > 0)
	r2[1] = r2[1] - yprd;
      else if (delta < 0)
	r2[1] = r2[1] + yprd;
    }

    delta = r2[2]-r1[2];
    if (fabs(delta) > half_zprd) {
      if (delta > 0)
	r2[2] = r2[2] - zprd;
      else if (delta < 0)
	r2[2] = r2[2] + zprd;
    }
  } else {

    vec3_subtract(r2,r1,delr);

    delta = vec3_dot(delr,uc_rvh);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(r2,uc_lva,r2);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lva,r2,r2);
      else if (delta < 0.0)
	vec3_add(r2,uc_lva,r2);
      //	vec3_scaleadd(-ceil(delta-0.5),uc_lva,r2,r2);
    }

    delta = vec3_dot(delr,uc_rvk);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(r2,uc_lvb,r2);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lvb,r2,r2);
      else if (delta < 0.0)
	vec3_add(r2,uc_lvb,r2);
	//	vec3_scaleadd(-ceil(delta-0.5),uc_lvb,r2,r2);
    }

    delta = vec3_dot(delr,uc_rvl);
    if (fabs(delta) > 0.5) {
      if (delta > 0.0)
	vec3_subtract(r2,uc_lvc,r2);
	//	vec3_scaleadd(-floor(delta+0.5),uc_lvc,r2,r2);
      else if (delta < 0.0)
	vec3_add(r2,uc_lvc,r2);
	//	vec3_scaleadd(-ceil(delta-0.5),uc_lvc,r2,r2);
    }

  }

}

inline double Box::Fractional(const int& idim, const double r[]) const {

  double rtmp[3];

  vec3_subtract(r,uc_origin,rtmp);

  return vec3_dot(rtmp,uc_rv[idim]);

}

inline void Box::Fractional(const double r[], double rfrac[]) const {

  double rtmp[3];

  vec3_subtract(r,uc_origin,rtmp);

  rfrac[0] = vec3_dot(rtmp,uc_rv[0]);
  rfrac[1] = vec3_dot(rtmp,uc_rv[1]);
  rfrac[2] = vec3_dot(rtmp,uc_rv[2]);

}

inline void Box::FractionalVelocity(const double v[], double vfrac[]) const {
  
  vfrac[0] = vec3_dot(v,uc_rv[0]);
  vfrac[1] = vec3_dot(v,uc_rv[1]);
  vfrac[2] = vec3_dot(v,uc_rv[2]);

}

inline void Box::InverseFractional(const double rfrac[], double r[]) const {

  vec3_scale(rfrac[0],uc_lva,r);
  vec3_scaleadd(rfrac[1],uc_lvb,r,r);
  vec3_scaleadd(rfrac[2],uc_lvc,r,r);

  vec3_add(r,uc_origin,r);
}

inline double Box::FractionalDiag(const int& idim, const double r[], 
			   ofstream& nodefile) const {

  double rtmp[3];

  vec3_subtract(r,uc_origin,rtmp);

  return vec3_dot(rtmp,uc_rv[idim]);

}

#endif
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
@


3.2
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.1
log
@Merging branch cjkimme_version with the trunk. testh and testi are kind
of questionable, but everything else looks ok.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d215 8
@


2.7
log
@Updated header
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.6
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.5
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.5.2.1
log
@Committing changes to branch cjkimme_version before trying to merge changes
to the main branch onto branch cjkimme_version. Adding classes
for conjugate_gradient minimization along with two derived classes. One
is interfacial_minimizer which minimizes with respect to rigid translations
of groups of atoms. The other is grain_boundary_minimizer which minimizes
the zero temperature energy of a grain boundary allowing interlayer relaxation normal to the gb.
@
text
@a213 8
inline void Box::FractionalVelocity(const double v[], double vfrac[]) const {
  
  vfrac[0] = vec3_dot(v,uc_rv[0]);
  vfrac[1] = vec3_dot(v,uc_rv[1]);
  vfrac[2] = vec3_dot(v,uc_rv[2]);

}

@


2.5.2.2
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
@


2.4
log
@Gutted the class Input, so that it is now a generic wrapper.
All the detailed treatment of each command is pushed down into
the relevant classes.
@
text
@d1 28
@


2.3
log
@Cleaned up various things, especially treatment of constants
and input strings.
@
text
@d186 9
@


2.2
log
@Fixed a couple more bugs to get neighbor binning working.
No more known round-off problems exist.
@
text
@d174 12
@


2.1
log
@This is a lot of stuff.  Basically, the code is now parallel,
but it is only tested for the force field twobody_lj_cut.

The parallelization scheme is based on Steve Plimptons Comm class.
@
text
@d164 21
@


2.0
log
@*** empty log message ***
@
text
@a27 5
//        Positions on )0,1[ are mapped onto [0,1).
//        Positions on [0,1) are left alone.
//        Distances on )-1,1( should not occur
//        Distances on )-0.5,0.5( are mapped (-0.5,0.5).
//        Distances on [-0.5,0.5] are left alone.
@


1.6
log
@Added class Profile to measure different types of spatial profiles
Added class Input to handle input commands.
Added global functions input_string to parse input commands.
@
text
@@


1.5
log
@Add some comments to minimg functions.
@
text
@d117 1
a117 1
    if (fabs(delta) > half_xprd) {
d119 1
a119 1
	r2[1] = r2[1] - xprd;
d121 1
a121 1
	r2[1] = r2[1] + xprd;
d125 1
a125 1
    if (fabs(delta) > half_xprd) {
d127 1
a127 1
	r2[2] = r2[2] - xprd;
d129 1
a129 1
	r2[2] = r2[2] + xprd;
@


1.4
log
@Added configuration output routine to Box.
Added shifted origin to minimg routines.
Cleaned up minimg routines to consistently
Deal with following issues:
	orthorhombic versus triclinic
	inner-loop Minimig_Dist functions only perform single box shift,
		as it is more efficient than general shift.
	For this reason, standard Minimg_Pos function also only
		performs single box shift, but also checks that
		aparticles have not strayed too far.
	Initial config may require more than single box shift, and
		so for this we use Minimg_Full_pos.
Treatment of equality conditions:
	Positions on )0,1[ are mapped onto [0,1).
	Positions on [0,1) are left alone.
	Distances on )-1,1( should not occur
	Distances on )-0.5,0.5( are mapped (-0.5,0.5).
	Distances on [-0.5,0.5] are left alone.
@
text
@d10 24
a35 8
     // Note: This scheme fails if delr is
     // more than 2 box lengths in any direction. Hence, need
     // to ensure that particles do not stray more than
     // half box-length outside of central box.
     //
     // Since the sign of the distance is arbitrary, we
     // never shift a distance that is exactly plus or minus
     // half a box-length.
a101 5
     // Note: This scheme fails if delr is
     // more than 2 box lengths in any direction. Hence, need
     // to ensure that particles do not stray more than
     // half box-length outside of central box.
     //
@


1.3
log
@Fixed a variety of bugs related to energy conservation.
Add kinetic energy and temperature calculation.
LJ and Stillinger-Weber forcefields fully tested against
TOWHEE and energy conservation.
@
text
@d11 9
d24 1
d53 1
a53 1
      if (delta > 0)
d55 2
a56 1
      else if (delta < 0)
d58 1
d63 1
a63 1
      if (delta > 0)
d65 2
a66 1
      else if (delta < 0)
d68 1
d73 1
a73 1
      if (delta > 0)
d75 2
a76 1
      else if (delta < 0)
d78 1
d80 1
d85 6
d96 1
d121 1
d126 1
a126 1
      if (delta > 0)
d128 2
a129 1
      else if (delta < 0)
d131 1
d136 1
a136 1
      if (delta > 0)
d138 2
a139 1
      else if (delta < 0)
d141 1
d146 1
a146 1
      if (delta > 0)
d148 2
a149 1
      else if (delta < 0)
d151 1
d153 1
@


1.2
log
@Created an abstract class Forcefield, with derived classes Force_Twobody
and Force_Threebody.
Implemented Stillinger-Weber forcefield within Force_Threebody.
Unfortunately, the COSP neighboring method does not work for
threebody forces, so we currently do not have neighbor lists
for threebody interactions.  Probably need to use LAMMPS-like
ghost atom method and standard neighbor list structures.
@
text
@d12 1
a12 7
  delr[0] = r1[0]-r2[0];
  if (fabs(delr[0]) > half_xprd) {
    if (delr[0] > 0)
      delr[0] = delr[0] - xprd;
    else if (delr[0] < 0)
      delr[0] = delr[0] + xprd;
  }
d14 50
a63 6
  delr[1] = r1[1]-r2[1];
  if (fabs(delr[1]) > half_yprd) {
    if (delr[1] > 0)
      delr[1] = delr[1] - yprd;
    else if (delr[1] < 0)
      delr[1] = delr[1] + yprd;
a64 10

  delr[2] = r1[2]-r2[2];
  if (fabs(delr[2]) > half_zprd) {
    if (delr[2] > 0)
      delr[2] = delr[2] - zprd;
    else if (delr[2] < 0)
      delr[2] = delr[2] + zprd;
  }

  return;
d70 1
d72 50
a121 22
  delta = r2[0]-r1[0];
  if (fabs(delta) > half_xprd) {
    if (delta > 0)
      r2[0] = r2[0] - xprd;
    else if (delta < 0)
      r2[0] = r2[0] + xprd;
  }

  delta = r2[1]-r1[1];
  if (fabs(delta) > half_xprd) {
    if (delta > 0)
      r2[1] = r2[1] - xprd;
    else if (delta < 0)
      r2[1] = r2[1] + xprd;
  }

  delta = r2[2]-r1[2];
  if (fabs(delta) > half_xprd) {
    if (delta > 0)
      r2[2] = r2[2] - xprd;
    else if (delta < 0)
      r2[2] = r2[2] + xprd;
a123 1
  return;
@


1.1
log
@
Added box_inline.h to provide function Minimg_Diff in inline form
@
text
@d5 5
d34 31
@

