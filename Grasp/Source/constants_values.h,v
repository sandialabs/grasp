head	4.3;
access;
symbols
	ReverseComm_branch:4.3.0.10
	ADTools_branch:4.3.0.8
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0.2.1
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.8.0.2
	cjkimme_version_merge_from_trunk_1:2.3.2.1
	cjkimme_version:2.3.0.2;
locks; strict;
comment	@ * @;


4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches
	3.0.2.1;
next	2.8;

2.8
date	2004.08.27.20.05.36;	author athomps;	state Exp;
branches;
next	2.7;

2.7
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.6;

2.6
date	2004.05.20.22.11.33;	author athomps;	state Exp;
branches;
next	2.5;

2.5
date	2004.03.20.00.15.37;	author athomps;	state Exp;
branches;
next	2.4;

2.4
date	2004.03.01.18.13.34;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2004.01.28.20.36.13;	author athomps;	state Exp;
branches
	2.3.2.1;
next	2.2;

2.2
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2003.10.20.22.05.45;	author athomps;	state Exp;
branches;
next	;

2.3.2.1
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;

3.0.2.1
date	2005.01.04.00.23.00;	author athomps;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Fixed glitch in header.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef CONSTANTS_VALUES_H
#define CONSTANTS_VALUES_H
//
// ***** THESE DEFINITIONS ARE FOR CONSTANTS.CPP ONLY ***
// ***** DO NOT INCLUDE IN OTHER COMPILATION UNITS   ****
//
// This include file contains the values 
// of global physical constants.
//
// It is accessed only by constants.cpp, which
// contains the implementation of the Constants
// class.
//
// If all the constants were integers, we could 
// define them internally in the Constants class 
// declaration.  But they're not, so C++ requires
// that they be initialized externally.  External
// initializations of static data members have
// external linkage and can only appear once, so we
// have to put them in the class definition file constant.cpp. 
// For clarity, I choose to put them in a separate header file 
// which is included in constants.cpp.  
//
const double Constants::ev2kjpermol_eam = 1/(100.0*1.0365e-4);
const double Constants::ev2kjpermol_nist = 96.4853415;
const double Constants::cal2kj = 4.184;
const double Constants::pi = 3.141592653589793238462643383279502884197169399;
//
// Values to be used when working in real (SI) units.
const double Constants::tfactor_real = 100.0;
const double Constants::boltz_real = 8.314472e-3;
const double Constants::evfactor_real = ev2kjpermol_eam;
const double Constants::esfactor_real = 1389.3544;
const double Constants::pfactor_real = 6.02214199e-4;
// Values to be used when working in reduced units.
const double Constants::tfactor_reduced = 1.0;
const double Constants::boltz_reduced = 1.0;
const double Constants::evfactor_reduced = 1.0;
const double Constants::esfactor_reduced = 1.0;
const double Constants::pfactor_reduced = 1.0;
// Values to be used when working in metal units.
const double Constants::tfactor_metal = 0.010180864;
const double Constants::boltz_metal = boltz_real/ev2kjpermol_nist;
const double Constants::evfactor_metal = 1.0;
const double Constants::esfactor_metal = esfactor_real/ev2kjpermol_nist;
const double Constants::pfactor_metal = pfactor_real/ev2kjpermol_nist;
//
// Values to be used when working in kcal units.
const double Constants::tfactor_kcal = 48.888213;
const double Constants::boltz_kcal = boltz_real/cal2kj;
const double Constants::evfactor_kcal = evfactor_real/cal2kj;
const double Constants::esfactor_kcal = esfactor_real/cal2kj;
const double Constants::pfactor_kcal = pfactor_real/cal2kj;
#endif
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
d71 1
d92 7
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
a54 1
const double Constants::cal2kj = 4.184;
a74 7
//
// Values to be used when working in kcal units.
const double Constants::tfactor_kcal = 48.888213;
const double Constants::boltz_kcal = boltz_real/cal2kj;
const double Constants::evfactor_kcal = evfactor_real/cal2kj;
const double Constants::esfactor_kcal = esfactor_real/cal2kj;
const double Constants::pfactor_kcal = pfactor_real/cal2kj;
@


3.1
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d55 1
d76 7
@


3.0.2.1
log
@Added energies to Reax code, added kcal unit style and added
the example testrdx to Makefile.testing
@
text
@a54 1
const double Constants::cal2kj = 4.184;
a74 7
//
// Values to be used when working in kcal units.
const double Constants::tfactor_kcal = 48.888213;
const double Constants::boltz_kcal = boltz_real/cal2kj;
const double Constants::evfactor_kcal = evfactor_real/cal2kj;
const double Constants::esfactor_kcal = esfactor_real/cal2kj;
const double Constants::pfactor_kcal = pfactor_real/cal2kj;
@


2.8
log
@Eliminated troublesome use of inline static const initializations
to define compile-time integer constants. Replaced with enumeration constants.
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.7
log
@Updated header
@
text
@d46 6
a51 7
// initializations of static data members are supposed
// to have internal linkage, so that we could include
// them in the constants.h header file, but in practice
// some compilers give them external linkage and so we
// have to put them in constant.cpp. For clarity, I choose
// to put them in a separate header file which is included in
// constants.cpp.  
@


2.6
log
@Added NPT ensemble. Noy sure if it is working
yet, and need to update documentation.
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.5
log
@Various
@
text
@d48 1
a48 1
// them in the constants.h head file, but in practice
d62 1
d68 1
d74 1
@


2.4
log
@Added Ewald sum example
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
d69 1
a69 1
const double Constants::boltz_metal = 8.617e-5;
@


2.3
log
@The primary change is the addition of the embedded atom method (EAM)
This is contained in the class Force_Eam. An example is contained
in the directory Testing/testl.

I also tweaked various parts of the code:
-Added epsilon shift to unit cell origin to avoid
pathologies associated with origin at zero
-Changed ndof from 3n to 3n-3
-Implemented localptr usertag arrays in class ParticleList
This enables user to pick whatever integer tags they want for
atoms, but the code generates internal tags 0,1,....nparticles_tot-1.
-Random velocities are now generated for all nparticles_tot particles,
but only assigned to local particles, so that velocity assignments
are independent of number of processors used.
-I got rid of the dreaded COSP neighboring scheme
-I added an example of Nose-Hoover thermostat in testm
-I added a warning for when force field type has no particle type match.
@
text
@d55 1
d61 1
d66 1
d71 1
a71 1

@


2.3.2.1
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
d46 7
a52 6
// initializations of static data members have
// external linkage and can only appear once, so we
// have to put them in the class definition file constant.cpp. 
// For clarity, I choose to put them in a separate header file 
// which is included in constants.cpp.  
//
a54 1
const double Constants::pi = 3.141592653589793238462643383279502884197169399;
a59 2
const double Constants::esfactor_real = 1389.3544;
const double Constants::pfactor_real = 6.02214199e-4;
a63 2
const double Constants::esfactor_reduced = 1.0;
const double Constants::pfactor_reduced = 1.0;
d66 1
a66 1
const double Constants::boltz_metal = boltz_real/ev2kjpermol_nist;
d68 1
a68 2
const double Constants::esfactor_metal = esfactor_real/ev2kjpermol_nist;
const double Constants::pfactor_metal = pfactor_real/ev2kjpermol_nist;
@


2.2
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d36 1
a36 1
// global physical constants.
d50 2
a51 2
// have to put them constant.cpp. For clarity, I choose
// to put them in a separate file which is included in
d53 2
a56 2
// tfactor = 100.0 fs/100fs
// k_B = 8.314472e-3 kJ/mol/K
d59 1
d63 5
@


2.1
log
@Cleaned up various things, especially treatment of constants
and input strings.
@
text
@d1 28
@

