head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2007.04.02.19.30.02;	author athomps;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.31.01.06.13;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.28.19.12.19;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.14.15.07.56;	author athomps;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fixed problem with invalid neighbor list with fix deformation.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#include <string>
#include <vector>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "constants.h"
#include "fix.h"
#include "fix_deformation.h"
#include "fix_temp_rescale.h"
#include "input.h"
#include "particlelist.h"
#include "box.h"
#include "comm.h"
#include "log.h"
extern Log glog;
extern Constants constants;

Fix_Deformation::Fix_Deformation() {
  fix_style = deformation;
  Lvolume = false;
}

Fix_Deformation::~Fix_Deformation() {
}

void Fix_Deformation::Setup(string& fix_string,
			    const Box* b, 
			    const ParticleTypeList* t, Comm* comm) {

  int node;
  bool match;

  node = comm->get_node();

  if (comm->get_Lnodefile()) {
    comm->get_nodefile() << "Entering Fix_Deformation::Setup()" << endl;
  }

  std::istringstream buf_in(fix_string);

  buf_in >> deformation_freq >> deformation_matrix[0][0] >> deformation_matrix[0][1] >> deformation_matrix[0][2] 
	 >> deformation_matrix[1][0] >> deformation_matrix[1][1] >> deformation_matrix[1][2] 
	 >> deformation_matrix[2][0] >> deformation_matrix[2][1] >> deformation_matrix[2][2]; 

  if (buf_in.fail()) {
    glog.error("Fix_Deformation::Setup():\n"
	       "Read error in input string");
  }
  
  if (deformation_freq <= 0) {
    glog.error("Fix_Deformation::input_temperature_control:\n"
	       "Invalid input parameter");
  }

  deformation_skip = 1;

}

void Fix_Deformation::Final(ParticleList* p, Box* b, 
			   Comm* comm) {
}

void Fix_Deformation::Start(ParticleList* p, Box* b, 
			   Comm* comm) {
  int Lremap;
  // Force volume to be repartitioned every reneighboring
  Lvolume = true;
  if (deformation_skip++ % deformation_freq == 0) {

    p->ScaledDeform(b,deformation_matrix);
    b->BoxDeform(deformation_matrix,comm);
  }
}

void Fix_Deformation::Output(ParticleList* p, const Box* b, 
			   Comm* comm) {
}

@


1.3
log
@Modifed fix deformation to correctly remap vectors
@
text
@d116 2
a117 1
  Lvolume = false;
a121 1
    Lvolume = true;
@


1.2
log
@Fixed worlds + reaxbond bug
@
text
@d115 1
a115 1

d120 1
a120 2
    b->BoxDeform(deformation_matrix);
    p->ResetPosition(b,true);
@


1.1
log
@Added new files for fix deformation command
@
text
@d121 1
@

