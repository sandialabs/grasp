head	4.4;
access;
symbols
	ReverseComm_branch:4.4.0.4
	ADTools_branch:4.4.0.2
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.7.0.2
	cjkimme_version_merge_from_trunk_1:2.4.2.1
	cjkimme_version:2.4.0.2;
locks; strict;
comment	@// @;


4.4
date	2006.01.25.21.40.12;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.7;

2.7
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.6;

2.6
date	2004.03.20.00.15.37;	author athomps;	state Exp;
branches;
next	2.5;

2.5
date	2004.02.12.00.13.00;	author athomps;	state Exp;
branches;
next	2.4;

2.4
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches
	2.4.2.1;
next	2.3;

2.3
date	2003.08.01.16.22.01;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2003.07.22.22.27.41;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2003.06.17.19.08.11;	author athomps;	state Exp;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.03.20.32.39;	author athomps;	state Exp;
branches;
next	;

2.4.2.1
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Added multiple replica feature.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#include <iostream>
#include <fstream>
#include <vector>
#include <string>
using namespace std;
#include  "mpi.h"
#include "grasp.h"
#include "fixed_object.h"
#include "box.h"
#include "log.h"
extern Log glog;

Fixed_Object::Fixed_Object()
{
  type = 0;
  tag = 0;
  id[0] = '*';
  color = 0;
  x[0] = 0.0;
  x[1] = 0.0;
  x[2] = 0.0;
  charge = 0.0;
}

Fixed_Object::Fixed_Object(const int& typein, const int& tagin, 
			   const string& idin, const int& colorin,
		   const double xin[], const double& chargein)
{
  type = typein;
  tag = tagin;
  id = idin;
  color = colorin;
  x[0] = xin[0];
  x[1] = xin[1];
  x[2] = xin[2];
  charge = chargein;
}

Fixed_Object::Fixed_Object(const Fixed_Object& p)
{
  type = p.type;
  tag = p.tag;
  id = p.id;
  color = p.color;
  x[0] = p.x[0];
  x[1] = p.x[1];
  x[2] = p.x[2];
  charge = p.charge;
}

Fixed_Object& Fixed_Object::operator=(const Fixed_Object& p)
{
  if (this != &p) {
    type = p.type;
    tag = p.tag;
    id = p.id;
    color = p.color;
    x[0] = p.x[0];
    x[1] = p.x[1];
    x[2] = p.x[2];
    charge = p.charge;
  }
  return *this;
}

Fixed_Object::~Fixed_Object() {}

int Fixed_Object::get_tag() const
{
  return tag;
}

string Fixed_Object::get_id() const
{
  return id;
}

int Fixed_Object::get_color() const
{
  return color;
}

double Fixed_Object::get_charge() const
{
  return charge;
}

void Fixed_Object::set_type(const int& typein)
{
  type = typein;
}

void Fixed_Object::set_tag(const int& tagin)
{
  tag = tagin;
}

void Fixed_Object::set_id(const string& idin)
{
  id = idin;
}

void Fixed_Object::set_color(const int& colorin)
{
  color = colorin;
}

void Fixed_Object::set_x(const double x_in[])
{
  x[0] = x_in[0];
  x[1] = x_in[1];
  x[2] = x_in[2];
}

void Fixed_Object::set_charge(const double& chargein)
{
  charge = chargein;
}

@


4.3
log
@Fixed glitch in header.
@
text
@d51 1
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
@


3.1
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


2.7
log
@Updated header
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.6
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.5
log
@This update is an excercise in housekeeping.
I remove all of the DEBUG ifdefs.
I added a flag to class Comm which by default
points nodefile to /dev/null.
Finally, I redid the Makefile to enable
multi-architecture builds on a single machine.
This last one will require an update to Documentation.
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.4
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@a49 3
#ifdef DEBUG_ALLOCATION
  glog.logfile << " Creating fixed_object of type " << type << endl;
#endif
a63 3
#ifdef DEBUG_ALLOCATION
  glog.logfile << " Creating fixed_object of type " << typein << endl;
#endif
a67 3
#ifdef DEBUG_ALLOCATION
  glog.logfile << " Copying fixed_object of type " << p.type << endl;
#endif
d93 1
a93 6
Fixed_Object::~Fixed_Object()
{
#ifdef DEBUG_ALLOCATION
  glog.logfile << " Destroying fixed_object type " << type << endl;
#endif
}
@


2.4.2.1
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
d50 3
d67 3
d74 3
d102 6
a107 1
Fixed_Object::~Fixed_Object() {}
@


2.3
log
@This version does not work.  It contains the beginnings of the
neighbor binning scheme. I want to save it before I attempt
to combine local and ghost atoms in one list.
@
text
@d1 28
@


2.2
log
@Improved treament of log and error messages using new class Log.
Added minimization class Minimizer (currently only steepest descent).
Implemented Nsq neighboring for threebody forcefields.
Reinstated density profiles.
@
text
@a0 2
using namespace std;

@


2.1
log
@This is a lot of stuff.  Basically, the code is now parallel,
but it is only tested for the force field twobody_lj_cut.

The parallelization scheme is based on Steve Plimptons Comm class.
@
text
@a2 1
#ifdef DEBUG_ALLOCATION
d4 1
a4 1
#endif
d11 2
a12 1
extern ofstream logfile;
d25 1
a25 1
  logfile << " Creating fixed_object of type " << type << endl;
d42 1
a42 1
  logfile << " Creating fixed_object of type " << typein << endl;
d49 1
a49 1
  logfile << " Copying fixed_object of type " << p.type << endl;
d79 1
a79 1
  logfile << " Destroying fixed_object type " << type << endl;
@


2.0
log
@*** empty log message ***
@
text
@d12 1
d25 1
a25 1
  cout << " Creating fixed_object of type " << type << endl;
d42 1
a42 1
  cout << " Creating fixed_object of type " << typein << endl;
d49 1
a49 1
  cout << " Copying fixed_object of type " << p.type << endl;
d79 1
a79 1
  cout << " Destroying fixed_object type " << type << endl;
d123 1
a123 1
void Fixed_Object::set_x(const double x_in[], const Box& b)
a127 1
  b.Minimg_Pos(x);
@


1.1
log
@Added the Forcefield derived class Force_External. It makes use
of the class Fixed_Object, which resembles class Particle,
bu does not have a velocity vector and does not provide
timestepping operations.

Also added the basic temperature initialization in temperature.cpp,
as well as velocity output in box.cpp.
@
text
@d8 2
@

