head	4.8;
access;
symbols
	ReverseComm_branch:4.4.0.4
	ADTools_branch:4.4.0.2
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.2
	REAX-2:3.2
	P_MonacoSource:3.2.0.6
	GraspSource:3.2
	P_Monaco:3.2.0.4
	InitialGrasp:3.2
	REAXFF:3.2.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.7.0.2
	cjkimme_version_merge_from_trunk_1:2.3.2.2
	cjkimme_version:2.3.0.2;
locks; strict;
comment	@// @;


4.8
date	2007.10.23.22.05.56;	author athomps;	state Exp;
branches;
next	4.7;

4.7
date	2007.09.05.22.43.34;	author athomps;	state Exp;
branches;
next	4.6;

4.6
date	2007.03.12.04.00.03;	author athomps;	state Exp;
branches;
next	4.5;

4.5
date	2007.02.15.04.41.38;	author athomps;	state Exp;
branches;
next	4.4;

4.4
date	2006.01.25.21.40.12;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.3;

3.3
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.2;

3.2
date	2004.11.23.00.59.55;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2004.10.22.22.30.16;	author cjkimme;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.7;

2.7
date	2004.08.13.21.52.19;	author athomps;	state Exp;
branches;
next	2.6;

2.6
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.5;

2.5
date	2004.03.20.00.15.37;	author athomps;	state Exp;
branches;
next	2.4;

2.4
date	2004.03.01.20.26.43;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches
	2.3.2.1;
next	2.2;

2.2
date	2003.11.26.22.51.14;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2003.10.31.20.21.17;	author athomps;	state Exp;
branches;
next	;

2.3.2.1
date	2004.02.18.01.12.40;	author cjkimme;	state Exp;
branches;
next	2.3.2.2;

2.3.2.2
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;


desc
@@


4.8
log
@removed some unnecessary dynamic_casts and fixed problems with self-interactions
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#include <string>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <vector>
using namespace std;
#include "mpi.h"
#include "grasp.h"
#include "particletypelist.h"
#include "fix.h"
#include "fix_none.h"
#include "fix_deformation.h"
#include "fix_temp_rescale.h"
#include "fix_temp_rescale_slab.h"
#include "fixlist.h"
#include "box.h"
#include "comm.h"
#include "constants.h"
#include "log.h"
extern Log glog;

FixList::FixList() {
}

FixList::~FixList() {
  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    delete fix_list[ifix];
  }
}

void FixList::Setup(Box* b, 
		    ParticleTypeList* t, Comm* comm) {

  int node;
  string str_tmp,fix_string;
  Fix::FixStyles fix_style;
  Fix* fix;

  node = comm->get_node();
  if (node == 0) {
    glog.get_logfile() << "\n\n\n";
    glog.get_logfile() << "Entering FixList::Setup()" << endl;
  }

  if (comm->get_Lnodefile()) {
    comm->get_nodefile() << "Entering FixList::Setup()" << endl;
  }

  for (int ifix = 0;ifix<fix_style_list.size();ifix++) {

    str_tmp = fix_style_list[ifix];

    if (str_tmp == "none") {
      fix_style = Fix::none;
    } else if (str_tmp == "deformation") {
      fix_style = Fix::deformation;
    } else if (str_tmp == "temp_rescale") {
      fix_style = Fix::temp_rescale;
    } else if (str_tmp == "temp_rescale_slab") {
      fix_style = Fix::temp_rescale_slab;
    } else if (str_tmp == "temp_nose_hoover") {
      fix_style = Fix::temp_nose_hoover;
    } else {
      glog.error("FixList::Setup: Invalid fix style");
      exit(1); // Purely to satisfy compiler uninitialized data checks
    }

    switch(fix_style) {
    case Fix::deformation:
      fix = new Fix_Deformation();
      fix_list.push_back(fix);
      fix_string = fix_string_list[ifix];
      fix_list[ifix]->Setup(fix_string,b,t,comm);
      break;
    case Fix::temp_rescale:
      fix = new Fix_TempRescale();
      fix_list.push_back(fix);
      fix_string = fix_string_list[ifix];
      fix_list[ifix]->Setup(fix_string,b,t,comm);
      break;
    case Fix::temp_rescale_slab:
      fix = new Fix_TempRescaleSlab();
      fix_list.push_back(fix);
      fix_string = fix_string_list[ifix];
      fix_list[ifix]->Setup(fix_string,b,t,comm);
      break;
    case Fix::none:
      fix = new Fix_None();
      fix_list.push_back(fix);
      fix_string = fix_string_list[ifix];
      fix_list[ifix]->Setup(fix_string,b,t,comm);
      break;
    default:
      glog.error("FixList::Setup:\n"
		 "Invalid Fix style");
    }
  }
}

void FixList::Start(ParticleList* p, Box* b, 
			   Comm* comm) {
  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    fix_list[ifix]->Start(p,b,comm);
  }
}

void FixList::Final(ParticleList* p, Box* b, 
			   Comm* comm) {
  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    fix_list[ifix]->Final(p,b,comm);
  }
}

void FixList::Output(ParticleList* p, const Box* b, 
			   Comm* comm) const {
  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    fix_list[ifix]->Output(p,b,comm);
  }
}

void FixList::input_fix(const string& buf)
{
  string fix_style,fix_string;

  std::istringstream buf_in(buf);
  buf_in >> fix_style;
  if (buf_in.fail()) {
    glog.get_logfile() << endl;
    glog.error("FixList::input_fix:\n"
	       "Read error in input file");
  }

  glog.get_logfile() << " " << fix_style;

  if (fix_style == "deformation") {
    buf_in.ignore();
    getline(buf_in,fix_string);

    if (buf_in.fail()) {
      glog.get_logfile() << endl;
      glog.error("FixList::input_fix:\n"
		 "Read error in input file");
    }
    glog.get_logfile() << " " << fix_string << endl;

  } else if (fix_style == "temp_rescale") {
    buf_in.ignore();
    getline(buf_in,fix_string);

    if (buf_in.fail()) {
      glog.get_logfile() << endl;
      glog.error("FixList::input_fix:\n"
		 "Read error in input file");
    }
    glog.get_logfile() << " " << fix_string << endl;

  } else if (fix_style == "temp_rescale_slab") {
    buf_in.ignore();
    getline(buf_in,fix_string);

    if (buf_in.fail()) {
      glog.get_logfile() << endl;
      glog.error("FixList::input_fix:\n"
		 "Read error in input file");
    }
    glog.get_logfile() << " " << fix_string << endl;
  } else if (fix_style == "none") {
    fix_string = "";
    glog.get_logfile() << endl;
  } else {
    glog.error("FixList::input_fix:\n"
	       "Unrecognized fix style");
  }
  fix_style_list.push_back(fix_style);
  fix_string_list.push_back(fix_string);
}

bool FixList::get_Lvolume() const {
  bool Lvolume;

  Lvolume = false;

  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    if (fix_list[ifix]->get_Lvolume()) Lvolume = true;
  }

  return Lvolume;
}

@


4.7
log
@Fixed midpoint bug and eliminated all osx_serial_debug warnings (-Wuninitialized, -Wshadow, ...)
@
text
@d116 1
a116 2
      fix = dynamic_cast<Fix*>
	(new Fix_Deformation());
d122 1
a122 2
      fix = dynamic_cast<Fix*>
	(new Fix_TempRescale());
d128 1
a128 2
      fix = dynamic_cast<Fix*>
	(new Fix_TempRescaleSlab());
d134 1
a134 2
      fix = dynamic_cast<Fix*>
	(new Fix_None());
@


4.6
log
@Added fix deformation command to allow box shape to be changed over time
@
text
@d111 1
@


4.5
log
@Added non-periodic BC, constant velocity vector, slabwise temperature rescale fix
@
text
@d58 1
d101 2
d114 7
d149 8
a156 1
void FixList::Final(ParticleList* p, const Box* b, 
d184 12
a195 1
  if (fix_style == "temp_rescale") {
d205 1
d227 12
@


4.4
log
@Added multiple replica feature.
@
text
@d59 1
d102 2
d118 7
d177 10
@


4.3
log
@Fixed glitch in header.
@
text
@d85 2
a86 2
    glog.logfile << "\n\n\n";
    glog.logfile << "Entering FixList::Setup()" << endl;
d150 1
a150 1
    glog.logfile << endl;
d155 1
a155 1
  glog.logfile << " " << fix_style;
d162 1
a162 1
      glog.logfile << endl;
d166 1
a166 1
    glog.logfile << " " << fix_string << endl;
d169 1
a169 1
    glog.logfile << endl;
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
@


3.3
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.2
log
@Redid Force_Twobody class to better handle many different variants.
Added in new for of exp6 that is required for BKS force field.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


3.1
log
@Merging branch cjkimme_version with the trunk. testh and testi are kind
of questionable, but everything else looks ok.
@
text
@d72 4
a75 3
#ifdef USE_NODEFILES
  comm->get_nodefile() << "Entering FixList::Setup()" << endl;
#endif
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d72 1
a72 1

d74 1
@


2.7
log
@Did some memory clean up, to satisfy valgrind
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.6
log
@Updated header
@
text
@d53 3
@


2.5
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.4
log
@Fixed nameclash for stringstream class
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.3
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d125 1
a125 1
  stringstream buf_in(buf);
@


2.3.2.1
log
@Adding read in of initial configuration from arbitrary filename with "read atoms
<filename>". Adding read in of initial velocities with "read velocities <filename>"
command and "dumpfile root <prefix>" command to change the default prefix for output
files. #ifdefs are around output to nodefiles.
@
text
@d68 1
a68 1
#ifdef USE_NODEFILES
a69 1
#endif
@


2.3.2.2
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
a52 3
  for (int ifix = 0;ifix<fix_list.size();ifix++) {
    delete fix_list[ifix];
  }
d126 1
a126 1
  std::istringstream buf_in(buf);
@


2.2
log
@Gutted the class Input, so that it is now a generic wrapper.
All the detailed treatment of each command is pushed down into
the relevant classes.
@
text
@d1 28
@


2.1
log
@Added Fix class, for doing slective thermostatting
and other things.
@
text
@a14 1
#include "input.h"
d27 1
a27 1
void FixList::Setup(const Input* inp, Box* b, 
d36 5
d43 1
a43 1
  for (int ifix = 0;ifix<inp->fix_style_list.size();ifix++) {
d45 1
a45 1
    str_tmp = inp->fix_style_list[ifix];
d62 1
a62 1
      fix_string = inp->fix_string_list[ifix];
d69 1
a69 1
      fix_string = inp->fix_string_list[ifix];
d92 36
@

