head	4.7;
access;
symbols
	ReverseComm_branch:4.4.0.6
	ADTools_branch:4.4.0.4
	Monaco_Aidan:4.3.2.1.0.2
	Root-of-Monaco_Aidan:4.3.2.1
	PPPM_Crozier2:4.4.0.2
	PPPM_Crozier:4.4
	Root-of-PPPM_Crozier:4.4
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.5.0.4
	cjkimme_version_merge_from_trunk_1:2.5.2.1
	cjkimme_version:2.5.0.2;
locks; strict;
comment	@ * @;


4.7
date	2007.09.05.22.43.34;	author athomps;	state Exp;
branches;
next	4.6;

4.6
date	2007.05.30.05.41.46;	author athomps;	state Exp;
branches;
next	4.5;

4.5
date	2006.11.09.20.13.52;	author athomps;	state Exp;
branches;
next	4.4;

4.4
date	2005.06.08.20.08.48;	author athomps;	state Exp;
branches
	4.4.2.1
	4.4.6.1;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches
	4.3.2.1;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches
	3.0.6.1;
next	2.5;

2.5
date	2004.08.13.21.52.19;	author athomps;	state Exp;
branches
	2.5.2.1;
next	2.4;

2.4
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2004.03.20.00.15.38;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2004.03.02.17.49.47;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2004.03.01.18.13.34;	author athomps;	state Exp;
branches;
next	;

2.5.2.1
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;

3.0.6.1
date	2005.02.17.21.41.38;	author saubry;	state Exp;
branches;
next	3.0.6.2;

3.0.6.2
date	2005.02.24.21.03.59;	author saubry;	state Exp;
branches;
next	3.0.6.3;

3.0.6.3
date	2005.04.07.00.04.52;	author saubry;	state Exp;
branches;
next	;

4.3.2.1
date	2005.05.03.21.44.53;	author athomps;	state Exp;
branches
	4.3.2.1.2.1;
next	;

4.3.2.1.2.1
date	2005.10.21.15.44.43;	author saubry;	state Exp;
branches;
next	4.3.2.1.2.2;

4.3.2.1.2.2
date	2006.02.15.21.34.48;	author athomps;	state Exp;
branches;
next	;

4.4.2.1
date	2005.06.16.22.23.41;	author pscrozi;	state Exp;
branches;
next	4.4.2.2;

4.4.2.2
date	2005.06.20.22.41.00;	author athomps;	state Exp;
branches;
next	4.4.2.3;

4.4.2.3
date	2005.06.21.21.46.18;	author pscrozi;	state Exp;
branches;
next	;

4.4.6.1
date	2006.11.09.00.20.53;	author athomps;	state Exp;
branches;
next	;


desc
@@


4.7
log
@Fixed midpoint bug and eliminated all osx_serial_debug warnings (-Wuninitialized, -Wshadow, ...)
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef FORCE_EWALD_H
#define FORCE_EWALD_H

class Particle_Types;
class Box;

// Data structure for electrostatic force field
// using Ewald method.
class Force_Ewald: public ForceField {
 public:
  // enum class for force field types
  enum ForceFieldTypes {standard};
 private:
  vector<int> kxvecs,kyvecs,kzvecs;
  // Arrays for pre-computed Ewald coefficients
  vector<double> ug;
  vector<double*> eg,vg;
  // Array for electric field at each atom
  vector<double*> ek;
  // Arrays for total structure factor
  vector<double> sfacrl,sfacim,sfacrl_all,sfacim_all;
  // Arrays for structure factor for each particle
  vector<double**> cs,sn;
  double g_ewald,precision,realspace_cutoff,gsqmx;
  double volume,uc_wh,uc_wk,uc_wl;
  double unitk[3];
  int kmax,maxlocal,kcount,kmax3d;
  int nparticles;
  double prefactor;

 public:

  Force_Ewald(const string);
  ~Force_Ewald();

  int get_entry(const int&, const int&) const;

  // We need to inline this so that an entry in Vtable is created
  void SetupCutNeighSq(const double&, Comm*){};
  void ReadInteractions(Comm*);
  void SetupInteractions(const Box*, const double&, Comm*);
  void force_standard(const double[], const double[],
		      const double&, const double&,
		    double[], double&,
		    const int&) const;
  void eik_dot_r();
  void Coeffs();
  void SetupKSpace(const ParticleList*, const Box*, Comm*);
  void allocate_karrays();
  void deallocate_karrays();
  void allocate_narrays();
  void deallocate_narrays();
  void ApplyForce(const bool&, const bool&, const bool&, 
		  ParticleList*, 
		  const Box*, Comm*);
  void SetupNeighbor(const string&, const int&,const double&, 
                        double&, double&, const Box*, Comm*);
  void Compute(const bool&, const bool&, ParticleList*, Comm*);
  void Eik_dot_r(ParticleList*);
  void SetupTypes(const ParticleTypeList*);
  double get_g_ewald() const;
};

#endif

@


4.6
log
@Implemented midpoint method for ReaxFF
@
text
@a100 2
  void Neighboring(ParticleList*, 
			int*, const Box*, Comm*);
@


4.5
log
@Merged ReverseComm_branch back into main branch
@
text
@d104 1
a104 1
                        double&, const Box*, Comm*);
@


4.4
log
@Added prototype for Force_PPPM class
@
text
@d98 2
a99 1
  void ApplyForce(const bool&, const bool&, ParticleList*, 
a100 1

@


4.4.6.1
log
@Finished adding atomic virial for ReaxFF force field
@
text
@d98 1
a98 2
  void ApplyForce(const bool&, const bool&, const bool&, 
		  ParticleList*, 
d100 1
@


4.4.2.1
log
@latest additions to the PPPM FF
@
text
@d93 1
a93 1
  void SetupKSpace(const Box*, Comm*);
@


4.4.2.2
log
@Added ParticleList to ForceField::SetupInterations()
@
text
@d86 1
a86 1
  void SetupInteractions(const ParticleList*, const Box*, const double&, Comm*);
@


4.4.2.3
log
@Latest PPPM version
@
text
@d69 1
a69 1
  double precision,realspace_cutoff,gsqmx;
d86 1
a86 1
  void SetupInteractions(ParticleList*, const Box*, double&, Comm*);
d92 2
a93 2
  void Coeffs(double&);
  void SetupKSpace(const Box*, double&, Comm*);
d99 1
a99 1
		  const Box*, double&, Comm*);
d105 1
a105 1
  void Compute(const bool&, const bool&, ParticleList*, double&, Comm*);
d108 1
@


4.3
log
@Fixed glitch in header.
@
text
@d86 1
a86 1
  void SetupInteractions(const Box*, const Force_Ewald*, Comm*);
@


4.3.2.1
log
@First commit of new Monaco branch
@
text
@a100 5
  // added saubry (01-24-05)
  void EnergyChange(int*, vector <double>,
		    const bool&, ParticleList*, 
		    const Box*, Comm*);

@


4.3.2.1.2.1
log
@Correct a few things.
@
text
@d102 1
a102 1
  void EnergyChange(int*, double [3],
@


4.3.2.1.2.2
log
@Improved performance of MC moves and turned on periodic output
@
text
@d101 5
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
a100 5
  // added saubry (01-24-05)
  void EnergyChange(int*, vector <double>,
		    const bool&, ParticleList*, 
		    const Box*, Comm*);

@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
d85 5
@


3.1
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


3.0.6.1
log
@Implement energy change.
Two ways are implemented:
     -  brute force,
     -  removal of the energy of atom before being boosted
        and addition of the energy of the boosted atoms.
Brute force is for every force field. Other method is for EAM only for now.


Sylvie Aubry - 02-17-05
@
text
@a84 6
  // added saubry (01-24-05)
  void EnergyChange(int*, vector <double>,
		    const bool&, const bool&, ParticleList*, 
		    const Box*, Comm*);


@


3.0.6.2
log
@Update changes.
@
text
@d87 1
a87 1
		    const bool&, ParticleList*, 
@


3.0.6.3
log
@Fusion of ALex and Sylvie's versions.
Implementation of bins.
Add energy change.

saubry (04-06-05)
@
text
@d90 1
@


2.5
log
@Did some memory clean up, to satisfy valgrind
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.5.2.1
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@@


2.4
log
@Updated header
@
text
@d62 1
@


2.3
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.2
log
@Updated documentation
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.1
log
@Added Ewald sum example
@
text
@d68 1
a68 1
  void SetupInteractions(const Box*, Comm*);
d90 1
@

