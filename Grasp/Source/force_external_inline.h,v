head	4.4;
access;
symbols
	ReverseComm_branch:4.3.0.10
	ADTools_branch:4.3.0.8
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.4.0.2
	cjkimme_version_merge_from_trunk_1:2.2.2.1
	cjkimme_version:2.2.0.2;
locks; strict;
comment	@ * @;


4.4
date	2007.09.05.22.43.34;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.4;

2.4
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2004.03.20.00.15.38;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2004.01.28.20.36.13;	author athomps;	state Exp;
branches
	2.2.2.1;
next	2.1;

2.1
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.17.17.14.18;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.03.20.32.39;	author athomps;	state Exp;
branches;
next	;

2.2.2.1
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Fixed midpoint bug and eliminated all osx_serial_debug warnings (-Wuninitialized, -Wshadow, ...)
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef FORCE_EXTERNAL_INLINE_H
#define FORCE_EXTERNAL_INLINE_H

// INLINE(inline) FUNCTION DEFINITIONS
//
// Inlining inner loop operations provides significant performance gain
//
// We used the following form for the 9-3 potential, based on 
// Steele, W. Surf. Sci., v. 36, p. 317, (1973).
//
// U =            epsilon [ (2/15) (sigma/r)^9 -       (sigma/r)^3 ]

// The corresponds to the Lennard-Jones energy of a particle sitting
// a distance r above the first plane of a semi-infinite cubic
// array of particles, whose density is rhos.  In terms of the 
// underlying Lennard-Jones parameters, epsilon is given by:
//
//    epsilon = (2*Pi/3)*epsilon_w*rhos*sigma^3
//
// We chose the second as it has one less parameter. The corresponding
// virial is then
//
// W =            epsilon [ (6/5)  (sigma/r)^9 - (3)   (sigma/r)^3 ]
//
inline void Force_External::force_lj93_cut(
					const double& pos, 
					const int& iaxis, 
					const double xj[], 
					double f[], double& energy,
					const int& ientry) const
{
  double delr,delr_2,delr_6,virial_i,rinv,rinv_abs,delr_3;

  delr = pos-xj[iaxis-1];
  if (fabs(delr) <= param_list[ientry].params[4]) {
    rinv = 1.0/delr;
    rinv_abs = fabs(rinv);
    delr_2 = rinv_abs*rinv_abs;
    delr_3 = delr_2*rinv_abs;
    delr_6 = delr_3*delr_3;
    virial_i = (param_list[ientry].params[0]*delr_6 
	      - param_list[ientry].params[1])*delr_3;
    energy = (param_list[ientry].params[2]*delr_6 
	      - param_list[ientry].params[3])*delr_3;
    f[0] = 0.0;
    f[1] = 0.0;
    f[2] = 0.0;
    f[iaxis-1] = virial_i*rinv;
  }  else {
    virial_i = 0.0;
    energy = 0.0;
    f[0] = 0.0;
    f[1] = 0.0;
    f[2] = 0.0;
  }
    
  return ;
}

inline void Force_External::force_lj93_cut_shift(
					const double& pos, 
					const int& iaxis, 
					const double xj[], 
					double f[], double& energy,
					const int& ientry) const
{
  double delr,delr_2,delr_6,virial_i,rinv,rinv_abs,delr_3;

  delr = pos-xj[iaxis-1];
  if (fabs(delr) <= param_list[ientry].params[4]) {
    rinv = 1.0/delr;
    rinv_abs = fabs(rinv);
    delr_2 = rinv_abs*rinv_abs;
    delr_3 = delr_2*rinv_abs;
    delr_6 = delr_3*delr_3;
    virial_i = (param_list[ientry].params[0]*delr_6 
	      - param_list[ientry].params[1])*delr_3;
    energy = (param_list[ientry].params[2]*delr_6 
	      - param_list[ientry].params[3])*delr_3
	      - param_list[ientry].params[5];
    f[0] = 0.0;
    f[1] = 0.0;
    f[2] = 0.0;
    f[iaxis-1] = virial_i*rinv;
  }  else {
    virial_i = 0.0;
    energy = 0.0;
    f[0] = 0.0;
    f[1] = 0.0;
    f[2] = 0.0;
  }
    
  return ;
}

inline void Force_External::force_lj93_cut_minimg(const Fixed_Object& pi,
					const Particle& pj, 
					double f[], double& energy,
					const int& ientry, const Box* b) const
{
  double xi[3],xj[3];
  double pos;
  int iaxis;

  iaxis = pi.get_color();
  pi.get_x(xi);
  pos = xi[iaxis-1];
  pj.get_x(xj);
  
  b->Minimg_Diff_Shift(xi,xj);

  force_lj93_cut(pos,iaxis,xj,f,energy,ientry);
}

inline void Force_External::force_lj93_cut_shift_minimg(const Fixed_Object& pi,
					const Particle& pj, 
					double f[], double& energy,
					const int& ientry, const Box* b) const
{
  double xi[3],xj[3];
  double pos;
  int iaxis;

  iaxis = pi.get_color();
  pi.get_x(xi);
  pos = xi[iaxis-1];
  pj.get_x(xj);
  
  b->Minimg_Diff_Shift(xi,xj);

  force_lj93_cut_shift(pos,iaxis,xj,f,energy,ientry);
}

#endif
@


4.3
log
@Fixed glitch in header.
@
text
@d77 1
a77 1
  double delr,delr_2,delr_6,virial,rinv,rinv_abs,delr_3;
d86 1
a86 1
    virial = (param_list[ientry].params[0]*delr_6 
d93 1
a93 1
    f[iaxis-1] = virial*rinv;
d95 1
a95 1
    virial = 0.0;
d112 1
a112 1
  double delr,delr_2,delr_6,virial,rinv,rinv_abs,delr_3;
d121 1
a121 1
    virial = (param_list[ientry].params[0]*delr_6 
d129 1
a129 1
    f[iaxis-1] = virial*rinv;
d131 1
a131 1
    virial = 0.0;
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
@


3.1
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


2.4
log
@Updated header
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.3
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.2
log
@The primary change is the addition of the embedded atom method (EAM)
This is contained in the class Force_Eam. An example is contained
in the directory Testing/testl.

I also tweaked various parts of the code:
-Added epsilon shift to unit cell origin to avoid
pathologies associated with origin at zero
-Changed ndof from 3n to 3n-3
-Implemented localptr usertag arrays in class ParticleList
This enables user to pick whatever integer tags they want for
atoms, but the code generates internal tags 0,1,....nparticles_tot-1.
-Random velocities are now generated for all nparticles_tot particles,
but only assigned to local particles, so that velocity assignments
are independent of number of processors used.
-I got rid of the dreaded COSP neighboring scheme
-I added an example of Nose-Hoover thermostat in testm
-I added a warning for when force field type has no particle type match.
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.2.2.1
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
@


2.1
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d127 1
a127 1
					const int& ientry, const Box& b) const
d138 1
a138 1
  b.Minimg_Diff_Shift(xi,xj);
d146 1
a146 1
					const int& ientry, const Box& b) const
d157 1
a157 1
  b.Minimg_Diff_Shift(xi,xj);
@


2.0
log
@*** empty log message ***
@
text
@d1 28
@


1.2
log
@Added class Profile to measure different types of spatial profiles
Added class Input to handle input commands.
Added global functions input_string to parse input commands.
@
text
@@


1.1
log
@Added the Forcefield derived class Force_External. It makes use
of the class Fixed_Object, which resembles class Particle,
bu does not have a velocity vector and does not provide
timestepping operations.

Also added the basic temperature initialization in temperature.cpp,
as well as velocity output in box.cpp.
@
text
@d8 2
a9 2
// There are two alternate forms for the lj9393 potential, differing
// only by a factor of 3/Sqrt(10) in epsilon. 
d11 6
a16 1
// U =  sqrt(2/5) epsilon [ (1/5)  (sigma/r)^9 - (3/2) (sigma/r)^3 ]
d18 1
a18 1
// U =            epsilon [ (2/15) (sigma/r)^9 -       (sigma/r)^3 ]
d20 1
a20 1
// We chose the second as it has one less parameter. The correspoinding
@

