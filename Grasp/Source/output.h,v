head	4.11;
access;
symbols
	ReverseComm_branch:4.3.0.10
	ADTools_branch:4.3.0.8
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.3
	REAX-2:3.2.2.1
	P_MonacoSource:3.2.0.6
	GraspSource:3.2
	P_Monaco:3.2.0.4
	InitialGrasp:3.2
	REAXFF:3.2.0.2
	premerge_cjkimme_version:3.1
	CRAY:2.14.0.2
	cjkimme_version_merge_from_trunk_1:2.8.2.4
	cjkimme_version:2.8.0.2;
locks; strict;
comment	@ * @;


4.11
date	2008.02.04.22.24.59;	author athomps;	state Exp;
branches;
next	4.10;

4.10
date	2007.11.15.21.31.40;	author athomps;	state Exp;
branches;
next	4.9;

4.9
date	2007.05.24.05.10.39;	author athomps;	state Exp;
branches;
next	4.8;

4.8
date	2007.03.16.06.18.30;	author athomps;	state Exp;
branches;
next	4.7;

4.7
date	2007.01.26.23.22.28;	author athomps;	state Exp;
branches;
next	4.6;

4.6
date	2007.01.16.21.56.22;	author athomps;	state Exp;
branches;
next	4.5;

4.5
date	2006.11.28.06.24.21;	author athomps;	state Exp;
branches;
next	4.4;

4.4
date	2006.11.09.20.13.52;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches
	4.3.6.1
	4.3.10.1;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.4;

3.4
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.3;

3.3
date	2005.03.31.23.07.47;	author athomps;	state Exp;
branches;
next	3.2;

3.2
date	2004.10.22.22.30.16;	author cjkimme;	state Exp;
branches
	3.2.2.1;
next	3.1;

3.1
date	2004.10.19.21.01.03;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.14;

2.14
date	2004.08.13.21.52.19;	author athomps;	state Exp;
branches;
next	2.13;

2.13
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.12;

2.12
date	2004.07.13.21.21.16;	author athomps;	state Exp;
branches;
next	2.11;

2.11
date	2004.05.20.22.11.34;	author athomps;	state Exp;
branches;
next	2.10;

2.10
date	2004.03.20.00.15.39;	author athomps;	state Exp;
branches;
next	2.9;

2.9
date	2004.03.01.18.13.34;	author athomps;	state Exp;
branches;
next	2.8;

2.8
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches
	2.8.2.1;
next	2.7;

2.7
date	2003.11.26.22.51.14;	author athomps;	state Exp;
branches;
next	2.6;

2.6
date	2003.10.31.20.20.43;	author athomps;	state Exp;
branches;
next	2.5;

2.5
date	2003.10.20.22.05.45;	author athomps;	state Exp;
branches;
next	2.4;

2.4
date	2003.09.19.23.35.18;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2003.08.01.16.22.01;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2003.07.22.22.27.41;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2003.06.17.19.08.11;	author athomps;	state Exp;
branches;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	;

2.8.2.1
date	2004.02.18.01.12.40;	author cjkimme;	state Exp;
branches;
next	2.8.2.2;

2.8.2.2
date	2004.05.14.16.12.58;	author cjkimme;	state Exp;
branches;
next	2.8.2.3;

2.8.2.3
date	2004.09.09.21.01.42;	author cjkimme;	state Exp;
branches;
next	2.8.2.4;

2.8.2.4
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;

3.2.2.1
date	2004.12.22.22.59.07;	author athomps;	state Exp;
branches;
next	;

4.3.6.1
date	2005.12.19.17.57.04;	author athomps;	state Exp;
branches;
next	4.3.6.2;

4.3.6.2
date	2006.02.15.21.34.48;	author athomps;	state Exp;
branches;
next	;

4.3.10.1
date	2006.11.08.04.18.38;	author athomps;	state Exp;
branches;
next	4.3.10.2;

4.3.10.2
date	2006.11.09.00.20.53;	author athomps;	state Exp;
branches;
next	;


desc
@@


4.11
log
@Added thermostat/barostat extended variables to restart file.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~

#ifndef OUTPUT_H
#define OUTPUT_H

class Output {
 public:
 private:
   Profile* density_profile;
   int thermo_freq,thermo_skip;
   int dump_freq,dump_skip,dumpalpha_type;
   int dumpvel_freq,dumpvel_skip,dumpref_freq,dumpalpha_freq,dumpalpha_skip;
   int dumpforce_freq,dumpforce_skip,dumpdisp_freq,dumpref_skip,dumpdisp_skip;
   int density_freq,density_skip;
   int dumpcfg_freq,dumpcfg_skip;
   int restart_freq,restart_skip;
   int dumpstress_freq,dumpstress_skip;
   bool Lrestart,Ldumpvelconfig,Ldumpvelcfg,Ldumpenergyconfig,Ldumpenergycfg;
   double vfactor,ffactor,pfactor;
   int dumpxcfg_freq,dumpxcfg_skip;
   int dumpreaxbond_freq,dumpreaxbond_skip,dumpreaxallbond_freq,dumpreaxallbond_skip;
   bool Lthermo,Ldump,Ldumpvel,Ldumpforce,Ldensity_profile,Ldumpcfg,Ldumpdisp;
   bool Ldumpref,Ldumpalpha,Ldumpxcfg,Ldumpstress,Ldumpreaxbonds,Ldumpreaxallbonds,Ldumpshift;
   bool Lstresstensor;
   bool Lsummomentum;

   string input_string_density_profile, dumpfile_root, dumpalpha_str;
   int dumpcfg_iter, dumpvel_iter, dumpfrc_iter, dumpref_iter, dumpdisp_iter;
   int dumpxcfg_iter, dumpstress_iter, dumpreaxbond_iter, dumpreaxallbond_iter;
   string& toFileNumber(int&, string&);
   bool appendOutput, defaultOutput;
   int nstep_prev;
   enum FormatStyles {scientific,fixed};
   FormatStyles formatstyle;
 public:
   Output(bool useDefaults);
   ~Output();
   void Setup(const Box*, const ParticleTypeList*, Comm*);
   void Finish(const int&, const ForceFieldList*, const ParticleList*, Comm*);
   void WriteTimings(const int&, const ForceFieldList*,
		     const ParticleList*, Comm*);
   void WriteOutput(int, ParticleList*, const Box*,
		    const ParticleTypeList*, Comm*,
		    const ForceFieldList*, const FixList*, const double&,
		    const bool&, const bool&, Stepper*);
   void OutputCfg(const int&, ParticleList*,
		  const ParticleTypeList*, const Box*, Comm*);
   void OutputExtendedCfg(const int&, ParticleList*,
		  const ParticleTypeList*, const Box*, Comm*);
   void OutputParticles(const int&, ParticleList*,
			const ParticleTypeList*, Comm*,
			const bool&, const bool&, const Box*);
   void OutputVelocities(const int&, ParticleList*, Comm*);
   void OutputAtomStress(const int&, ParticleList*, Comm*);
   void OutputForces(const int&, ParticleList*,Comm*);
   void OutputRefConfig(const int&, ParticleList*,
			const ParticleTypeList*, Comm*);
   void OutputDisplacements(const int&, ParticleList*,Comm*);
   void OutputThermo(const int&, const ParticleList*);
   void SetupDensityProfile(const int&, const int&);
   void SampleDensityProfile();
   void OutputDensityProfile(const int&, const bool&);
   void Summary();
   void set_nstep_prev(int);
   void input_density_profile(const string&);
   void input_thermo(const string&);
   void input_dump_particles(const string&);
   void input_dump_velocities(const string&);
   void input_dump_forces(const string&);
   void input_dump_ref_config(const string&);
   void input_dump_displacements(const string&);
   void input_dump_cfg(const string&);
   void input_dump_restart(const string&);
   void input_dump_extended_cfg(const string&);
   void input_dumpfile_root(const string&);
   void input_dump_mode(const string&);
   void input_dump_alpha(const string&);
   void input_dump_atom_stress(const string&);
   void input_dump_energies(const string&);
   void input_dump_reax_bonds(const string&);
   void input_dump_reax_allbonds(const string&);
   void input_nstep_prev(const string&);
   void input_dump_shift(const string& buf);
   void input_stress_tensor(const string& buf);
   void input_sum_momentum(const string& buf);
   void input_format_style(const string& buf);
   bool Need_Thermo();
   bool Need_AtomVirial();
#ifdef USE_REAX
   void OutputReaxBondOrders(const int&, ParticleList*, const ParticleTypeList*, Comm*);
   void OutputReaxAllBondOrders(const int&, ParticleList*, const ParticleTypeList*, Comm*);
#else
void OutputReaxBondOrders(const int&, ParticleList*,
			  const ParticleTypeList*, Comm*) {}
void OutputReaxAllBondOrders(const int&, ParticleList*,
			     const ParticleTypeList*, Comm*) {}
#endif
};

#endif
@


4.10
log
@Added 'output sum momentum' command
@
text
@d88 1
a88 1
		    const bool&, const bool&);
@


4.9
log
@Added command dump format style
@
text
@d68 1
d128 1
@


4.8
log
@Added commands to carry box dimensions in restart file and to output stress tensor
@
text
@d75 2
d127 1
@


4.7
log
@Added periodic shift tracking and added timestep to restart
@
text
@d67 1
d124 1
@


4.6
log
@Added nstep_prev command.
@
text
@d66 1
a66 1
   bool Ldumpref,Ldumpalpha,Ldumpxcfg,Ldumpstress,Ldumpreaxbonds,Ldumpreaxallbonds;
a101 2
   void OutputReaxBondOrders(const int&, ParticleList*, const ParticleTypeList*, Comm*);
   void OutputReaxAllBondOrders(const int&, ParticleList*, const ParticleTypeList*, Comm*);
d103 1
d122 1
d125 9
@


4.5
log
@Added atom energy and bonding output for ReaxFF
@
text
@d81 1
a81 1
   void WriteOutput(const int&, ParticleList*, const Box*,
d122 1
@


4.4
log
@Merged ReverseComm_branch back into main branch
@
text
@d61 1
a61 1
   bool Lrestart,Ldumpvelconfig,Ldumpvelcfg;
d64 1
d66 2
a67 1
   bool Ldumpref,Ldumpalpha,Ldumpxcfg,Ldumpstress;
d70 1
a70 1
   int dumpxcfg_iter, dumpstress_iter;
d102 2
d119 3
@


4.3
log
@Fixed glitch in header.
@
text
@d60 1
d65 1
a65 1
   bool Ldumpref,Ldumpalpha,Ldumpxcfg;
d68 1
a68 1
   int dumpxcfg_iter;
d71 1
d91 1
d114 1
d116 1
@


4.3.10.1
log
@Added atom stress for ReaxFF
@
text
@a59 1
   int dumpstress_freq,dumpstress_skip;
d64 1
a64 1
   bool Ldumpref,Ldumpalpha,Ldumpxcfg,Ldumpstress;
d67 1
a67 1
   int dumpxcfg_iter, dumpstress_iter;
a88 1
   void OutputAtomStress(const int&, ParticleList*, Comm*);
a110 1
   void input_dump_atom_stress(const string&);
@


4.3.10.2
log
@Finished adding atomic virial for ReaxFF force field
@
text
@a70 1
   int nstep_prev;
a114 1
   bool Need_AtomVirial();
@


4.3.6.1
log
@Bin Communication fixed
@
text
@d85 1
a85 1
   void OutputParticles(const int&, const ParticleList*,
@


4.3.6.2
log
@Improved performance of MC moves and turned on periodic output
@
text
@d80 1
a80 1
		    const bool&, const bool&, const bool& = false);
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
d74 3
a76 3
   void Finish(Comm*, const ForceFieldList*, const ParticleList*);
   void WriteTimings(Comm*, const ForceFieldList*,
		     const ParticleList*);
a97 1
   int nint(const double&) const;
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
d58 3
a60 3
   void Finish(const int&, const ForceFieldList*, const ParticleList*, Comm*);
   void WriteTimings(const int&, const ForceFieldList*,
		     const ParticleList*, Comm*);
d82 1
@


3.4
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.3
log
@Modified the timing output slightly
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
a81 1
   int nint(const double&) const;
@


3.2
log
@Merging branch cjkimme_version with the trunk. testh and testi are kind
of questionable, but everything else looks ok.
@
text
@d58 3
a60 3
   void Finish(Comm*, const ForceFieldList*, const ParticleList*);
   void WriteTimings(Comm*, const ForceFieldList*,
		     const ParticleList*);
@


3.2.2.1
log
@Completed prototype of parallel ReaxFF in GRASP, including charge equilibration
@
text
@d82 1
@


3.1
log
@Added ability to read velocities from the config.in file
and write velocities to the config.out and cfg.out files.
@
text
@d38 3
a40 3
   int dump_freq,dump_skip;
   int dumpvel_freq,dumpvel_skip;
   int dumpforce_freq,dumpforce_skip;
a43 1
   bool Lthermo,Ldump,Ldumpvel,Ldumpforce,Ldensity_profile,Ldumpcfg;
d46 8
a53 1
   string input_string_density_profile;
d55 1
a55 1
   Output();
d57 1
a57 1
   void Setup(const Box*, Comm*);
d67 2
d74 3
d88 2
d92 4
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d45 1
a45 1
   bool Lrestart;
@


2.14
log
@Did some memory clean up, to satisfy valgrind
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.13
log
@Updated header
@
text
@d49 1
@


2.12
log
@Added NPT ensemble
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.11
log
@Added NPT ensemble. Noy sure if it is working
yet, and need to update documentation.
@
text
@d49 1
a49 1
   void Setup(Stepper*, const Box*, Comm*);
@


2.10
log
@Various
@
text
@d45 1
a45 1
   double vfactor,ffactor;
d55 2
a56 1
		    const ForceFieldList*, const FixList*, const double&);
d60 2
a61 1
			const ParticleTypeList*, Comm*);
@


2.9
log
@Added Ewald sum example
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
d42 1
d44 1
d74 1
@


2.8
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d72 1
@


2.8.2.1
log
@Adding read in of initial configuration from arbitrary filename with "read atoms
<filename>". Adding read in of initial velocities with "read velocities <filename>"
command and "dumpfile root <prefix>" command to change the default prefix for output
files. #ifdefs are around output to nodefiles.
@
text
@d44 1
a44 3
   string input_string_density_profile, dumpfile_root;
   int dumpcfg_iter, dumpvel_iter, dumpfrc_iter;
   string& toFileNumber(int&, string&);
a71 1
   void input_dumpfile_root(const string&);
@


2.8.2.2
log
@Keeping track of displacements for each particle.
@
text
@d39 1
a39 1
   int dumpforce_freq,dumpforce_skip,dumpdisp_freq,dumpdisp_skip;
d42 1
a42 1
   bool Lthermo,Ldump,Ldumpvel,Ldumpforce,Ldensity_profile,Ldumpcfg,Ldumpdisp;
d45 1
a45 1
   int dumpcfg_iter, dumpvel_iter, dumpfrc_iter, dumpdisp_iter;
a46 1
   bool appendOutput;
a61 1
   void OutputDisplacements(const int&, ParticleList*,Comm*);
a72 1
   void input_dump_displacements(const string&);
a74 1
   void input_dump_mode(const string&);
@


2.8.2.3
log
@Committing changes to branch cjkimme_version before trying to merge changes
to the main branch onto branch cjkimme_version. Adding classes
for conjugate_gradient minimization along with two derived classes. One
is interfacial_minimizer which minimizes with respect to rigid translations
of groups of atoms. The other is grain_boundary_minimizer which minimizes
the zero temperature energy of a grain boundary allowing interlayer relaxation normal to the gb.
@
text
@d37 3
a39 3
   int dump_freq,dump_skip,dumpalpha_type;
   int dumpvel_freq,dumpvel_skip,dumpref_freq,dumpalpha_freq,dumpalpha_skip;
   int dumpforce_freq,dumpforce_skip,dumpdisp_freq,dumpref_skip,dumpdisp_skip;
a41 1
   int dumpxcfg_freq,dumpxcfg_skip;
a42 1
   bool Ldumpref,Ldumpalpha,Ldumpxcfg;
d44 2
a45 3
   string input_string_density_profile, dumpfile_root, dumpalpha_str;
   int dumpcfg_iter, dumpvel_iter, dumpfrc_iter, dumpref_iter, dumpdisp_iter;
   int dumpxcfg_iter;
d50 1
a50 1
   void Setup(Stepper*, const Box*, const ParticleTypeList*, Comm*);
a58 2
   void OutputExtendedCfg(const int&, ParticleList*,
		  const ParticleTypeList*, const Box*, Comm*);
a62 2
   void OutputRefConfig(const int&, ParticleList*,
			const ParticleTypeList*, Comm*);
a74 1
   void input_dump_ref_config(const string&);
a76 1
   void input_dump_extended_cfg(const string&);
a78 1
   void input_dump_alpha(const string&);
@


2.8.2.4
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
a41 1
   int restart_freq, restart_skip;
d44 2
a45 2
   bool Ldumpref,Ldumpalpha,Ldumpxcfg,Lrestart;
   double vfactor,ffactor,pfactor;
d53 1
a53 2
   ~Output();
   void Setup(const Box*, const ParticleTypeList*, Comm*);
d59 1
a59 2
		    const ForceFieldList*, const FixList*, const double&,
		    const bool&, const bool&);
d65 1
a65 2
			const ParticleTypeList*, Comm*,
			const bool&, const bool&, const Box*);
a88 2
   void input_dump_restart(const string&);
   bool Need_Thermo();
@


2.7
log
@Gutted the class Input, so that it is now a generic wrapper.
All the detailed treatment of each command is pushed down into
the relevant classes.
@
text
@d1 28
@


2.6
log
@Removed Thermo class
@
text
@d16 1
d19 1
a19 1
   void Setup(const Input*, Stepper*, const Box*, Comm*);
d38 6
@


2.5
log
@Cleaned up various things, especially treatment of constants
and input strings.
@
text
@d24 1
a24 1
		    const ForceFieldList*, const double&);
@


2.4
log
@Reworked a lot of the output to make it cleaner and more consistent.
Improved the timers.
@
text
@d13 2
a14 1
   bool Lthermo,Ldump,Ldumpvel,Ldumpforce,Ldensity_profile;
d24 3
a26 1
		    const ForceFieldList*);
d28 3
a30 3
			const ParticleTypeList* t, Comm* comm);
   void OutputVelocities(const int&, ParticleList*,Comm* comm);
   void OutputForces(const int&, ParticleList*,Comm* comm);
@


2.3
log
@This version does not work.  It contains the beginnings of the
neighbor binning scheme. I want to save it before I attempt
to combine local and ghost atoms in one list.
@
text
@d8 1
d13 1
a13 1
   bool Ldump,Ldumpvel,Ldumpforce,Ldensity_profile;
d18 3
a20 1
   void Finish(Comm*);
d22 2
a23 1
		    const ParticleTypeList*, Comm* comm, const float&);
@


2.2
log
@Improved treament of log and error messages using new class Log.
Added minimization class Minimizer (currently only steepest descent).
Implemented Nsq neighboring for threebody forcefields.
Reinstated density profiles.
@
text
@d19 1
a19 1
		    const ParticleTypeList*, Comm* comm);
@


2.1
log
@This is a lot of stuff.  Basically, the code is now parallel,
but it is only tested for the force field twobody_lj_cut.

The parallelization scheme is based on Steve Plimptons Comm class.
@
text
@d11 2
a12 1
   bool Ldump,Ldumpvel,Ldumpforce;
@


2.0
log
@*** empty log message ***
@
text
@d10 3
a12 2
   bool Ldump,Ldumpvel;
   double vfactor;
d15 8
a22 5
   void Setup(const Input*, Stepper*, const Box*);
   void Finish();
   void WriteOutput(const int&, ParticleList*, const Box*);
   void OutputParticles(const int&, ParticleList*);
   void OutputVelocities(const int&, ParticleList*);
d28 1
@

