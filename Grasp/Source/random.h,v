head	4.4;
access;
symbols
	ReverseComm_branch:4.4.0.4
	ADTools_branch:4.4.0.2
	Monaco_Aidan:4.3.0.6
	Root-of-Monaco_Aidan:4.3
	PPPM_Crozier2:4.3.0.4
	PPPM_Crozier:4.3
	Root-of-PPPM_Crozier:4.3
	Monaco:4.3.0.2
	PreMonaco:4.3
	Recovery-2004-04-12:4.0
	BRANCH:4.1.0.4
	PMONACO:4.1.0.2
	ROOT:4.1
	initial:4.0.0.2
	pmonaco:4.0
	Version_4_0:4.0
	Version_3_0:3.0
	BeforeREAXMerge:3.0
	REAX-2:3.0
	P_MonacoSource:3.0.0.6
	GraspSource:3.0
	P_Monaco:3.0.0.4
	InitialGrasp:3.0
	REAXFF:3.0.0.2
	premerge_cjkimme_version:3.0
	CRAY:2.3.0.2
	cjkimme_version_merge_from_trunk_1:2.1.2.1
	cjkimme_version:2.1.0.2;
locks; strict;
comment	@ * @;


4.4
date	2006.01.25.21.40.12;	author athomps;	state Exp;
branches;
next	4.3;

4.3
date	2005.05.03.16.28.27;	author athomps;	state Exp;
branches
	4.3.6.1;
next	4.2;

4.2
date	2005.05.02.20.13.38;	author athomps;	state Exp;
branches;
next	4.1;

4.1
date	2005.04.12.22.26.04;	author saubry;	state Exp;
branches;
next	4.0;

4.0
date	2005.04.05.16.43.30;	author athomps;	state Exp;
branches;
next	3.1;

3.1
date	2005.04.02.00.37.56;	author athomps;	state Exp;
branches;
next	3.0;

3.0
date	2004.09.22.17.56.49;	author athomps;	state Exp;
branches;
next	2.3;

2.3
date	2004.07.26.15.52.18;	author athomps;	state Exp;
branches;
next	2.2;

2.2
date	2004.03.20.00.15.39;	author athomps;	state Exp;
branches;
next	2.1;

2.1
date	2004.01.09.19.01.08;	author athomps;	state Exp;
branches
	2.1.2.1;
next	2.0;

2.0
date	2003.04.24.17.19.15;	author athomps;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.03.20.32.39;	author athomps;	state Exp;
branches;
next	;

2.1.2.1
date	2004.09.13.23.00.09;	author cjkimme;	state Exp;
branches;
next	;

4.3.6.1
date	2006.02.08.23.43.02;	author athomps;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Added multiple replica feature.
@
text
@//-----------------------------------------------------------------------
//
//   G R A S P
//   ____________
//   \           \
//    \ General   \
//     \ Reactive  \
//      \ Atomistic \
//       \ Simulation\
//        \ Program   \
//         \___________\
//
//    Timestamp: April 1, 2005
//    Version: 4.0
//
//    Primary Author: Aidan P. Thompson
//
//    e-mail: athomps@@sandia.gov
//   
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
//    for the United States Department of Energy under contract
//    No. DE-AC04-94AL-85000.
//
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
//----------------------------------------------------------------------- 
/////:EOH~
//
// This include file provides a simple
// portable random number generator
// on [0,1), where im is a modest
// integer chosen to limit the largest
// integer needing to be stored. It does not
// require support for overflow. Several
// choices, from:
// "Numerical Recipes (Quick and Dirty Generators)", Press
// et al., are given below.
//
// The numbers generated lie on sets of k-1 dimensional hyperplanes,
// when taken k at a time.  The number of hyperplanes is im^(1/k).
//
// Also, the sequence shows weak correlations between the nth and (n+i)th
// numbers, for i>5.  
//
// maxint is an upper bound on the largest 
// integer generated
//
// These values require maxint < 2^20;
//
// const int im = 6075;
// const int ia = 106;
// const int ic = 1283;
//
// These values require maxint < 2^32;
//
// const int im = 714025;
// const int ia = 4096;
// const int ic = 150889;
//
// These values require maxint < 2^32;
//
// const int im = 233280;
// const int ia = 9301;
// const int ic = 49297;
//
// These values require maxint < 2^31;
//
// const int im = 134456;
// const int ia = 8121;
// const int ic = 28411;
//
// These values require maxint < 2^30;
//
const int im = 714025;
const int ia = 1366;
const int ic = 150889;
//
// Reciprocal of im, to avoid division.
//
const double riminv = 1.0/(double)im;
//
// This is an inline function to update jran.
//
inline double ranlc(int& jran)
{
  jran = (jran*ia+ic)%im;
  return (double)jran*riminv;
};

//#include <iostream>
//#include "random.h"
////
//// This program tests and demonstrates 
//// use of ranlc() in random.h
////
//
//int main()
//{
//  int i,iseed,jran;
//  int nmax = (int)1e6;
//  double sum,sumsq,x;
//
//  cout << "Input seed " << endl;
//  cin >> iseed;
//
//  jran = iseed;
//
//  sum = 0.0;
//  sumsq = 0.0;
//  for (i=1;i<nmax;i++)
//    {
//      x = ranlc(jran);
//      sum+=x;
//      sumsq+=x*x;
//    }
//
//  cout << "im = " << im << endl;
//  cout << "i = " << i << endl;
//  cout << "jran = " << jran << endl;
//  cout << "avx = " << sum/(double)nmax << endl;
//  cout << "varx = " << sumsq/(double)nmax-(sum/(double)nmax)*
//    (sum/(double)nmax) << endl;
//}

// Gaussian RNG using simple linear congruential RNG
// gsave saves second value, currently not used.

inline double gausslc(int& iseed)
{
  double rsq,v1,v2,fac,gsave;
  rsq = 0.0;
  while (rsq>=1.0 || rsq==0.0)
    {
      v1 = 2.0*ranlc(iseed)-1.0;
      v2 = 2.0*ranlc(iseed)-1.0;
      rsq = v1*v1 + v2*v2;
    }
  fac = sqrt(-2.0*log(rsq)/rsq);
  gsave = v1*fac;
  return v2*fac;
}
@


4.3
log
@Fixed glitch in header.
@
text
@d50 11
a60 3
// integer needing to be stored. Several
// choices, from "Numerical Recipes", Press
// et all, are given below.
d63 1
a63 1
// integer that must be stored
@


4.3.6.1
log
@Added bin-based energy calc
@
text
@d135 1
d139 1
a139 1
  double rsq,v1,v2,fac;
d148 1
@


4.2
log
@Recovered from corruption on April 12, 1005
@
text
@d43 1
a43 1
//------------------------------------------------------------------------ 
@


4.1
log
@Create new branch.
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


4.0
log
@This is version 4.0
@
text
@d13 2
a14 2
//    Timestamp: April 1, 2005
//    Version: 4.0
d16 1
a16 1
//    Primary Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2005) Sandia National Laboratories
//
//    Sandia National Laboratories is a multiprogram laboratory 
//    operated by Sandia Corporation, a Lockheed Martin company,
a26 16
//    Under the terms of Contract DE-AC04-94AL85000 with Sandia 
//    Corporation, the U.S. Government retains certain rights in 
//    this software.
//
//    This software is distributed under the terms of the GNU Public 
//    License (GPL). For a copy of the GPL see the file 
//    Grasp/Documentation/LICENSE or visit the GNU website at 
//    http://www.gnu.org/copyleft/gpl.html. Briefly, the GPL 
//    entitles you to use the software, modify it and redistribute it. 
//    The main thing you can not do is apply any other licensing 
//    terms to the software. Also, if any part of this sofware is added 
//    to other software, then that software must also be released under 
//    the GPL.
//
//    This software comes with no warranty of any kind. 
//
@


3.1
log
@Merged REAX version with main version
@
text
@d16 1
a16 1
//    Author: Aidan P. Thompson
d20 4
a23 4
//    Copyright (2004) Sandia National Laboratories
//   
//    Sandia is a multiprogram laboratory operated by 
//    Sandia Corporation, a Lockheed Martin company,
d27 16
@


3.0
log
@Created a new version number, GRASP 3.0
@
text
@d13 2
a14 2
//    Timestamp: September 22, 2004
//    Version: 3.0
@


2.3
log
@Updated header
@
text
@d13 2
a14 1
//    Timestamp: July 26, 2004
@


2.2
log
@Various
@
text
@d13 1
a13 1
//    Timestamp: 1 March 2004
@


2.1
log
@Added a Perl script to Header.pl to prepend a header contained in
header.txt to source fiels, using

Header.pl *.pl *.cpp *.h M*[^~]
@
text
@d13 1
a13 1
//    Timestamp: 8 January 2004
@


2.1.2.1
log
@Committing merge of main trunk onto branch cjkimme_version.
@
text
@d13 1
a13 1
//    Timestamp: July 26, 2004
@


2.0
log
@*** empty log message ***
@
text
@d1 28
@


1.1
log
@Added the Forcefield derived class Force_External. It makes use
of the class Fixed_Object, which resembles class Particle,
bu does not have a velocity vector and does not provide
timestepping operations.

Also added the basic temperature initialization in temperature.cpp,
as well as velocity output in box.cpp.
@
text
@@

